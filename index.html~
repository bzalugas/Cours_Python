<!DOCTYPE html>
<html lang="fr">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Cours &amp; exercices de Python</title>
<meta name="author" content="Bastien ZALUGAS" />
<meta name="generator" content="Org Mode" />
<link rel="stylesheet" type="text/css" href="theme/personal/src/personalStyle.css"/>
<script type="text/javascript" src="theme/personal/src/tabScript.js"></script>
<link rel="stylesheet" href="theme/personal/src/highlight/styles/monokai-sublime.min.css"/>
<meta name="description" content="Cours et exercices de programmation en python niveau collège. Par Bastien Zalugas.">
<script src="theme/personal/src/highlight/highlight.min.js"></script>
</head>
<body>
<div id="content" class="content">
<header>
<h1 class="title">Cours &amp; exercices de Python</h1>
</header><nav id="table-of-contents" role="doc-toc">
<h2>Table des matières</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#introduction">Introduction</a></li>
<li><a href="#chapitre1">Chapitre 1 : Calculs et variables</a>
<ul>
<li><a href="#chapitre1_cours1">Cours 1 : Opérateurs arithmétiques</a></li>
<li><a href="#chapitre1_cours2">Cours 2 : Variables</a></li>
</ul>
</li>
<li><a href="#chapitre2">Chapitre 2 : Chaînes, listes, tuples, dictionnaires</a>
<ul>
<li><a href="#chapitre2_cours3">Cours 3 : Chaînes de caractères 1</a></li>
<li><a href="#chapitre2_cours4">Cours 4 : Chaînes de caractères 2</a></li>
<li><a href="#chapitre2_cours5">Cours 5 : Listes 1</a></li>
<li><a href="#chapitre2_cours6">Cours 6 : Listes 2</a></li>
<li><a href="#chapitre2_cours7">Cours 7 : Tuples et dictionnaires</a></li>
<li><a href="#chapitre2_cours8">Cours 8 : Input</a></li>
</ul>
</li>
<li><a href="#chapitre3">Chapitre 3 : Turtle</a>
<ul>
<li><a href="#chapitre3_cours9">Cours 9 : Turtle</a></li>
</ul>
</li>
<li><a href="#chapitre4">Chapitre 4 : Les conditions</a>
<ul>
<li><a href="#chapitre4_cours10">Cours 10 : if</a></li>
<li><a href="#chapitre4_cours11">Cours 11 : if, elif, else</a></li>
<li><a href="#chapitre4_cours12">Cours 12 : and, or</a></li>
<li><a href="#chapitre4_cours13">Cours 13 : Types de données et conversions</a></li>
</ul>
</li>
<li><a href="#chapitre5">Chapitre 5 : Les boucles</a>
<ul>
<li><a href="#chapitre5_cours14">Cours 14 : Les boucles for</a></li>
<li><a href="#chapitre5_cours15">Cours 15 : Boucles while</a></li>
</ul>
</li>
<li><a href="#chapitre6">Chapitre 6 : Mise en pratique</a>
<ul>
<li><a href="#chapitre6_cours16">Cours 16 : Nombre secret</a></li>
</ul>
</li>
<li><a href="#chapitre7">Chapitre 7 : Les fonctions</a>
<ul>
<li><a href="#chapitre7_cours17">Cours 17 : Fonctions</a></li>
<li><a href="#chapitre7_cours18">Cours 18 : Les modules</a></li>
</ul>
</li>
<li><a href="#chapitre7bis">Chapitre 7bis : Turtle avec les fonctions</a>
<ul>
<li><a href="#chapitre7bis_cours17b">Cours 17b : Un peu plus de turtle</a></li>
<li><a href="#chapitre7bis_cours18b">Cours 18b : Turtle, mais avec des fonctions</a></li>
</ul>
</li>
<li><a href="#chapitre8">Chapitre 8 : Mise en pratique 2</a>
<ul>
<li><a href="#chapitre8_niv1">Niveau 1</a></li>
<li><a href="#chapitre8_niv2">Niveau 2</a></li>
<li><a href="#chapitre8_niv3">Niveau 3</a></li>
</ul>
</li>
<li><a href="#pendu">Le pendu</a>
<ul>
<li><a href="#org17ca831">Fonctionnement du programme</a></li>
</ul>
</li>
<li><a href="#l-systemes">L-systèmes</a>
<ul>
<li><a href="#l-systemes-algue">L'algue de Lindenmayer</a></li>
<li><a href="#l-systemes-koch">La courbe de Koch</a></li>
<li><a href="#l-systemes-start-prog">Début de la programmation d'un L-système</a></li>
<li><a href="#l-systemes-cactus">Le cactus</a></li>
<li><a href="#l-systemes-continue-prog">Suite de la programmation</a></li>
<li><a href="#l-systemes-end">Nouveaux L-systèmes</a></li>
</ul>
</li>
<li><a href="#puissance4">Puissance 4</a>
<ul>
<li><a href="#puissance4_règles">Règles du Puissance 4</a></li>
<li><a href="#puissance4_etape1">Étape 1 : Définir la structure de notre programme</a></li>
<li><a href="#puissance4_etape2">Étape 2 : Définir les variables globales</a></li>
<li><a href="#puissance4_etape3">Étape 3 : Définir les fonctions d'affichage</a></li>
<li><a href="#puissance4_etape4">Étape 4 : Définir les fonctions pour lancer le jeu</a></li>
<li><a href="#puissance4_etape5">Étape 5 : Déroulement d'une partie</a></li>
<li><a href="#puissance4_etape6">Étape 6 : Déroulement d'un tour</a></li>
<li><a href="#puissance4_etape7">Étape 7 : Y a-t-il un vainqueur ?</a></li>
<li><a href="#puissance4_etape8">Étape 8 : Lancement du jeu !</a></li>
<li><a href="#ia_puissance4_theorie">Théorie</a></li>
<li><a href="#ia_puissance4_code">Code</a></li>
<li><a href="#org5481001">Un peu de cours</a></li>
<li><a href="#org0a328fd">Retour au code</a></li>
</ul>
</li>
</ul>
</div>
</nav>

<div id="outline-container-introduction" class="outline-2">
<h2 id="introduction">Introduction</h2>
<div class="outline-text-2" id="text-introduction">
</div>
<div id="outline-container-orgd88a0a2" class="outline-4">
<h4 id="orgd88a0a2">Manuel de Python</h4>
<div class="outline-text-4" id="text-orgd88a0a2">
<p target="_blank">
Tu peux télécharger le manuel de python en <a href="manuel/manuel_python.pdf" target="_blank">cliquant ici</a>.
</p>
</div>
</div>
<div id="outline-container-org6122fe2" class="outline-4">
<h4 id="org6122fe2">Présentation</h4>
<div class="outline-text-4" id="text-org6122fe2">
<ul class="org-ul">
<li>Prénom</li>
<li>As-tu déjà programmé ? Si oui, avec quel langage de programmation ?</li>
<li>Motivation : pourquoi t'es-tu inscrit à ce cours ?</li>
</ul>
</div>
</div>
<div id="outline-container-orge8b7d3e" class="outline-4">
<h4 id="orge8b7d3e">Notions de base</h4>
<div class="outline-text-4" id="text-orge8b7d3e">
<ul class="org-ul">
<li>Programmation ?</li>
<li>Programme ?</li>
<li>Langage de programmation ?</li>
<li>Instruction ?</li>
<li>Compilation ?</li>
<li>Exécution ?</li>
<li>Syntaxe ?</li>
</ul>
</div>
</div>
<div id="outline-container-org47eb16e" class="outline-4">
<h4 id="org47eb16e">Pourquoi Python ?</h4>
<div class="outline-text-4" id="text-org47eb16e">
<ul class="org-ul">
<li>Langage interprété : versatilité (le fonctionnement ne dépend pas du système d'exploitation)</li>
<li>Syntaxe simple</li>
<li>Très utilisé dans pleins de domaines différents</li>
</ul>
</div>
</div>
<div id="outline-container-orgc0ab7bb" class="outline-4">
<h4 id="orgc0ab7bb">Fonctionnement du cours</h4>
<div class="outline-text-4" id="text-orgc0ab7bb">
<p target="_blank">
<b>Les notions dont tu auras besoin dans ce cours se trouvent dans le <a href="manuel/manuel_python.pdf" target="_blank">manuel de python</a>.</b> Dans chaque cours, les chapitres que tu dois lire sont indiqués au début dans la section <b>Manuel</b>. Une fois que tu as lu les chapitres demandés, tu devras faire les exercices de la section <b>Exercices</b>.
</p>

<p>
Pour quasiment chaque exercice, on te demande de créer un <b>nouveau programme</b>, c'est à dire un <b>nouveau fichier</b>. Retiens-bien ça : <b>Un programme = un fichier</b>.
</p>

<p>
Une fois les exercices d'un cours terminés, appelle le professeur pour qu'il vienne vérifier que ce que tu as fait est correct. <b>N'oublie pas d'essayer ton programme avant pour être sûr que tu as terminé l'exercice et qu'il n'y a pas d'erreur.</b>
</p>
</div>
</div>
<div id="outline-container-orgbe0ad94" class="outline-4">
<h4 id="orgbe0ad94">Introduction à IDLE</h4>
<div class="outline-text-4" id="text-orgbe0ad94">
<ul class="org-ul">
<li>Sauvegarder un programme (p.18 du manuel)</li>
<li>Premier programme : Crée un premier programme nommé <code>bonjour.py</code> qui affiche le texte <b>"Bonjour tout le monde !"</b></li>
</ul>
</div>
</div>
</div>

<div id="outline-container-chapitre1" class="outline-2">
<h2 id="chapitre1">Chapitre 1 : Calculs et variables</h2>
<div class="outline-text-2" id="text-chapitre1">
</div>
<div id="outline-container-chapitre1_cours1" class="outline-3">
<h3 id="chapitre1_cours1">Cours 1 : Opérateurs arithmétiques</h3>
<div class="outline-text-3" id="text-chapitre1_cours1">
</div>
<div id="outline-container-org5b14128" class="outline-4">
<h4 id="org5b14128">Manuel</h4>
<div class="outline-text-4" id="text-org5b14128">
<ul class="org-ul">
<li><b>"Calculer avec Python"</b>, p.22-23</li>
<li><b>"Les opérateurs de Python"</b>, p.23</li>
<li><b>"L'ordre des opérateurs"</b>, p.24-25</li>
</ul>
</div>
</div>
<div id="outline-container-org11fd58a" class="outline-4">
<h4 id="org11fd58a">Exercices</h4>
<div class="outline-text-4" id="text-org11fd58a">
<p>
<b>Pour chaque exercice, il faut créer un nouveau programme.</b>
</p>
<ol class="org-ol">
<li>Dans un programme nommé <code>cours1.py</code> :
<ul class="org-ul">
<li>Affiche le résultat d'une <b>addition</b>.</li>
<li>Affiche le résultat d'une <b>soustraction</b>.</li>
<li>Affiche le résultat d'une <b>multiplication</b>.</li>
<li>Affiche le résultat d'une <b>division</b>.</li>
<li>Affiche le résultat d'un calcul utilisant <b>tous les opérateurs</b>.</li>
<li>Affiche le résultat d'une opération qui illustre l'ordre des opérateurs et l'utilisation des parenthèses.</li>
</ul></li>
</ol>
</div>
</div>
</div>

<div id="outline-container-chapitre1_cours2" class="outline-3">
<h3 id="chapitre1_cours2">Cours 2 : Variables</h3>
<div class="outline-text-3" id="text-chapitre1_cours2">
</div>
<div id="outline-container-org1bf8839" class="outline-4">
<h4 id="org1bf8839">Manuel</h4>
<div class="outline-text-4" id="text-org1bf8839">
<ul class="org-ul">
<li><b>"Les variables sont comme des étiquettes"</b>, p.25-26</li>
<li><b>"Utiliser les variables"</b>, p.26-29</li>
</ul>
</div>
</div>
<div id="outline-container-org0cf866f" class="outline-4">
<h4 id="org0cf866f">Exercices</h4>
<div class="outline-text-4" id="text-org0cf866f">
<ol class="org-ol">
<li>Dans un programme nommé <code>variables.py</code> :
<ul class="org-ul">
<li>Crée une variable nommée <code>mon_age</code> égale à ton âge, puis afficher le contenu de cette variable.</li>
<li>Crée une variable nommée <code>annee_actuelle</code> égale à l'année actuelle.</li>
<li>Affiche le résultat de <code>annee_actuelle</code> moins <code>mon_age</code>.</li>
</ul></li>
</ol>
</div>
</div>
</div>
</div>

<div id="outline-container-chapitre2" class="outline-2">
<h2 id="chapitre2">Chapitre 2 : Chaînes, listes, tuples, dictionnaires</h2>
<div class="outline-text-2" id="text-chapitre2">
</div>
<div id="outline-container-chapitre2_cours3" class="outline-3">
<h3 id="chapitre2_cours3">Cours 3 : Chaînes de caractères 1</h3>
<div class="outline-text-3" id="text-chapitre2_cours3">
</div>
<div id="outline-container-org8712dfa" class="outline-4">
<h4 id="org8712dfa">Manuel</h4>
<div class="outline-text-4" id="text-org8712dfa">
<ul class="org-ul">
<li><b>"Les chaînes"</b>, p.32</li>
<li><b>"Créer des chaînes"</b>, p.32-33</li>
<li><b>"Gérer les problèmes de chaînes"</b>, p.33-36</li>
</ul>
</div>
</div>
<div id="outline-container-orga69489f" class="outline-4">
<h4 id="orga69489f">Exercices</h4>
<div class="outline-text-4" id="text-orga69489f">
<ol class="org-ol">
<li>Dans un programme nommé <code>prenom_nom.py</code> :
<ul class="org-ul">
<li>Crée une variable <code>prenom</code> contenant une chaîne de caractères correspondant à ton prénom.</li>
<li>Crée une variable <code>nom</code> contenant une chaîne de caractères correspondant à ton nom de famille.</li>
<li>Affiche <b>"Bonjour ! Je m'appelle "</b> suivi du contenu de <code>prenom</code>, puis d'un espace, puis du contenu de <code>nom</code>.</li>
</ul></li>

<li>Dans un programme nommé <code>multiligne.py</code> :
<ul class="org-ul">
<li>Crée une variable <code>ma_journee</code> contenant une chaîne de caractères de plusieurs lignes racontant ta journée.</li>
<li>Affiche <code>ma_journee</code>.</li>
</ul></li>

<li>Dans un programme nommé <code>guillemets.py</code> :
<ul class="org-ul">
<li>Crée une variable <code>guillemets</code> qui contient la phrase <b>C'est vraiment compliqué de dire "mon prof de python est le meilleur" sans provoquer d'erreur.</b>.</li>
<li>Affiche cette variable.</li>
</ul></li>
</ol>
</div>
</div>
</div>

<div id="outline-container-chapitre2_cours4" class="outline-3">
<h3 id="chapitre2_cours4">Cours 4 : Chaînes de caractères 2</h3>
<div class="outline-text-3" id="text-chapitre2_cours4">
</div>
<div id="outline-container-org959348a" class="outline-4">
<h4 id="org959348a">Manuel</h4>
<div class="outline-text-4" id="text-org959348a">
<ul class="org-ul">
<li><b>"Insérer des valeurs dans des chaînes"</b>, p.36-37</li>
<li><b>"Multiplier des chaînes"</b>, p.37-38</li>
</ul>
</div>
</div>
<div id="outline-container-orgf474bfd" class="outline-4">
<h4 id="orgf474bfd">Exercices</h4>
<div class="outline-text-4" id="text-orgf474bfd">
<ol class="org-ol">
<li>Dans un programme nommé <code>prenom_nom_mieux.py</code> :
<ul class="org-ul">
<li>Crée une variable <code>prenom</code> contenant une chaîne de caractères correspondant à ton prénom.</li>
<li>Crée une variable <code>nom</code> contenant une chaîne de caractères correspondant à ton nom de famille.</li>
<li>Affiche <b>"Bonjour ! Je m'appelle &lt;prénom&gt; &lt;nom&gt;"</b> en remplaçant &lt;prénom&gt; et &lt;nom&gt; par les variables créées plus tôt et en utilisant <code>%s</code>.</li>
</ul></li>

<li>Dans un programme nommé <code>mon_salaire.py</code> :
<ul class="org-ul">
<li>Crée une variable <code>pieces_par_jour</code> contenant le nombre de pièces d'or que tu gagnes par jour.</li>
<li>Crée une variable <code>jours_de_travail</code> contenant le nombre de jours où tu as travaillé.</li>
<li>Affiche <b>"En travaillant &lt;jours_de_travail&gt; jours et avec un salaire quotidien de &lt;pieces_par_jour&gt; pièces, j'ai gagné un total de &lt;jours_de_travail * pieces_par_jour&gt; pièces. Je suis riche !"</b> en utilisant <code>%s</code>. Il faudra bien sûr remplacer les parties entre chevrons (&lt;&#x2026;&gt;) par le contenu des variables.</li>
</ul></li>

<li>Dans un programme nommé <code>perroquet.py</code> :
<ul class="org-ul">
<li>Crée une variable <code>phrase</code> contenant la phrase de ton choix.</li>
<li>Affiche <b>"Le perroquet répète : "</b>.</li>
<li>Affiche 10 fois la phrase contenue dans <code>phrase</code> sans te répéter.</li>
</ul></li>

<li>Dans un programme nommé <code>mur_de_caractères.py</code> :
<ul class="org-ul">
<li>Crée une variable <code>caractere</code> qui contient un caractère de ton choix. Par exemple "#" ou "-" ou ce que tu veux.</li>
<li>Crée une variable <code>repetition</code> et assigne-lui un nombre entier de ton choix.</li>
<li>Affiche autant de fois ton <code>caractere</code> que le nombre dans <code>repetition</code>.</li>
</ul></li>
</ol>
</div>
</div>
</div>

<div id="outline-container-chapitre2_cours5" class="outline-3">
<h3 id="chapitre2_cours5">Cours 5 : Listes 1</h3>
<div class="outline-text-3" id="text-chapitre2_cours5">
</div>
<div id="outline-container-orgcf975c8" class="outline-4">
<h4 id="orgcf975c8">Manuel</h4>
<div class="outline-text-4" id="text-orgcf975c8">
<ul class="org-ul">
<li><b>"Plus puissantes que les chaînes : les listes"</b>, p.38-41</li>
</ul>
</div>
</div>
<div id="outline-container-org1cf8c47" class="outline-4">
<h4 id="org1cf8c47">Exercices</h4>
<div class="outline-text-4" id="text-org1cf8c47">
<ol class="org-ol">
<li>Dans un programme nommé <code>liste_courses.py</code> :
<ul class="org-ul">
<li>Crée une variable <code>courses</code> contenant une <b>liste</b> d'au moins 5 choses à acheter. Chaque élément sera une chaîne de caractères.</li>
<li>Affiche la liste de courses.</li>
<li>Affiche le 1<sup>er</sup> élément de la liste en utilisant son indice.</li>
<li>Affiche le 3<sup>ème</sup> élément de la liste en utilisant son indice.</li>
<li>Modifie le 2<sup>ème</sup> élément de la liste et l'afficher après modification.</li>
<li>Modifie le dernier élément de la liste et l'afficher après modification.</li>
<li>Affiche d'un seul coup le sous-ensemble de la liste contenant les 2<sup>ème</sup>, 3<sup>ème</sup> et 4<sup>ème</sup> éléments de la liste.</li>
</ul></li>

<li>Dans un programme nommé <code>liste_de_listes.py</code> :
<ul class="org-ul">
<li>Crée une variable <code>legumes</code> contenant une <b>liste</b> de 3 légumes à acheter.</li>
<li>Crée une variable <code>fruits</code> contenant une <b>liste</b> de 3 fruits à acheter.</li>
<li>Crée une variable <code>divers</code> contenant une <b>liste</b> de 3 autres choses à acheter.</li>
<li>Crée une varibale <code>listes</code> qui sera une liste contenant les 3 listes créées précédemment. <b>Attention, il ne faut pas réécrire les listes, mais seulement les réutiliser.</b></li>
<li>En utilisant uniquement la varibale <code>listes</code> :
<ul class="org-ul">
<li>Affiche le 3<sup>ème</sup> élément de la liste <code>legumes</code>.</li>
<li>Affiche le 1<sup>er</sup> élément de la liste <code>fruits</code>.</li>
<li>Affiche le 2<sup>ème</sup> élément de la liste <code>divers</code>.</li>
</ul></li>
</ul></li>
</ol>
</div>
</div>
</div>

<div id="outline-container-chapitre2_cours6" class="outline-3">
<h3 id="chapitre2_cours6">Cours 6 : Listes 2</h3>
<div class="outline-text-3" id="text-chapitre2_cours6">
</div>
<div id="outline-container-org620570b" class="outline-4">
<h4 id="org620570b">Manuel</h4>
<div class="outline-text-4" id="text-org620570b">
<ul class="org-ul">
<li><b>"Ajouter des éléments à une liste"</b>, p.41-42</li>
<li><b>"Supprimer des éléments à une liste"</b>, p.42</li>
<li><b>"Arithmétique de liste"</b>, p.42-44</li>
</ul>
</div>
</div>
<div id="outline-container-orgebfd5ba" class="outline-4">
<h4 id="orgebfd5ba">Exercices</h4>
<div class="outline-text-4" id="text-orgebfd5ba">
<ol class="org-ol">
<li>Dans un programme nommé <code>liste_eleves.py</code> :
<ul class="org-ul">
<li>Crée une variable <code>eleves</code> contenant la liste des prénoms des personnes présentes à l'atelier Python en omettant le tient.</li>
<li>Affiche la liste.</li>
<li>Ajoute ton prénom et celui du professeur dans la liste.</li>
<li>Affiche la liste modifiée.</li>
<li>Supprime le prénom du professeur.</li>
<li>Place ton prénom au début de la liste.</li>
<li>Affiche la liste finale.</li>
</ul></li>

<li>Dans un programme nommé <code>encore_plus_de_listes.py</code> :
<ul class="org-ul">
<li>Crée une liste <code>liste_1</code> avec au moins 3 éléments de ton choix.</li>
<li>Crée une liste <code>liste_2</code> avec au moins 2 élements de ton choix.</li>
<li>Crée une liste <code>des_listes</code> qui est la concaténation des deux autres.</li>
<li>Affiche la liste <code>des_listes</code>.</li>
<li>Fais en sorte que la liste <code>des_listes</code> ait 5 fois plus de contenu.</li>
<li>Affiche la liste <code>des_listes</code>.</li>
</ul></li>
</ol>
</div>
</div>
</div>

<div id="outline-container-chapitre2_cours7" class="outline-3">
<h3 id="chapitre2_cours7">Cours 7 : Tuples et dictionnaires</h3>
<div class="outline-text-3" id="text-chapitre2_cours7">
</div>
<div id="outline-container-org9786b2f" class="outline-4">
<h4 id="org9786b2f">Manuel</h4>
<div class="outline-text-4" id="text-org9786b2f">
<ul class="org-ul">
<li><b>"Tuples"</b>, p.45</li>
<li><b>"Dictionnaires"</b>, p.45-47</li>
</ul>
</div>
</div>

<div id="outline-container-org3c579d1" class="outline-4">
<h4 id="org3c579d1">Indication complémentaire sur les dictionnaires</h4>
<div class="outline-text-4" id="text-org3c579d1">
<p>
Comme vu dans le manuel, tu peux modifier une valeur dans un dictionnaire simplement en utilisant sa clef :
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="font-weight: bold; font-style: italic;">fortunes</span> = {<span style="font-style: italic;">'Elon Musk'</span>: 180000000000, <span style="font-style: italic;">'Jeff Bezos'</span>: 114000000000, <span style="font-style: italic;">'Bill Gates'</span>: 104000000000, <span style="font-style: italic;">'Mark Zuckerberg'</span>: 64400000000, <span style="font-style: italic;">'Moi'</span>: 0}
<span style="font-weight: bold;">print</span>(fortunes)
<span style="font-weight: bold; font-style: italic;">fortunes</span>[<span style="font-style: italic;">'Moi'</span>] = 100
<span style="font-weight: bold;">print</span>(fortunes)
</pre>
</div>
<p>
Résultat :
</p>
<pre class="example" id="orga9e5b4f">
{'Elon Musk': 180000000000, 'Jeff Bezos': 114000000000, 'Bill Gates': 104000000000, 'Mark Zuckerberg': 64400000000, 'Moi': 0}
{'Elon Musk': 180000000000, 'Jeff Bezos': 114000000000, 'Bill Gates': 104000000000, 'Mark Zuckerberg': 64400000000, 'Moi': 100}
</pre>

<p>
Si tu veux <b>ajouter</b> un élément, c'est-à-dire une clef et une valeur, il faut faire comme si on modifiait la valeur de la nouvelle clef :
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="font-weight: bold; font-style: italic;">fortunes</span> = {<span style="font-style: italic;">'Elon Musk'</span>: 180000000000, <span style="font-style: italic;">'Jeff Bezos'</span>: 114000000000, <span style="font-style: italic;">'Bill Gates'</span>: 104000000000, <span style="font-style: italic;">'Mark Zuckerberg'</span>: 64400000000, <span style="font-style: italic;">'Moi'</span>: 0}
<span style="font-weight: bold;">print</span>(fortunes)
<span style="font-weight: bold; font-style: italic;">fortunes</span>[<span style="font-style: italic;">'Mon chat'</span>] = 100
<span style="font-weight: bold;">print</span>(fortunes)
</pre>
</div>
<p>
Résulat :
</p>
<pre class="example" id="org2eb7006">
{'Elon Musk': 180000000000, 'Jeff Bezos': 114000000000, 'Bill Gates': 104000000000, 'Mark Zuckerberg': 64400000000, 'Moi': 0}
{'Elon Musk': 180000000000, 'Jeff Bezos': 114000000000, 'Bill Gates': 104000000000, 'Mark Zuckerberg': 64400000000, 'Moi': 0, 'Mon chat': 100}
</pre>
</div>
</div>
<div id="outline-container-orgf24c4ac" class="outline-4">
<h4 id="orgf24c4ac">Exercices</h4>
<div class="outline-text-4" id="text-orgf24c4ac">
<ol class="org-ol">
<li>Dans un programme nommé <code>mon_tuple.py</code> :
<ul class="org-ul">
<li>Crée un tuple <code>un_tuple</code> avec au moins 3 éléments.</li>
<li>Affiche le tuple.</li>
<li>Modifie la première valeur du tuple.</li>
<li>Affiche le tuple modifié.</li>
</ul></li>

<li>Dans un programme nommé <code>courses_dictionnaire.py</code> :
<ul class="org-ul">
<li>Crée un dictionnaire <code>courses</code> contenant 3 éléments à acheter comme clef avec comme valeur la quantité à acheter.</li>
<li>Affiche le dictionnaire.</li>
<li>Ajoute un élément que tu aurais oublié.</li>
<li>Supprime le premier élément du dictionnaire.</li>
<li>Modifie la deuxième entrée du dictionnaire.</li>
<li>Affiche le dictionnaire.</li>
</ul></li>
</ol>
</div>
</div>
</div>

<div id="outline-container-chapitre2_cours8" class="outline-3">
<h3 id="chapitre2_cours8">Cours 8 : Input</h3>
<div class="outline-text-3" id="text-chapitre2_cours8">
</div>
<div id="outline-container-orgc4a4f0d" class="outline-4">
<h4 id="orgc4a4f0d">Cours</h4>
<div class="outline-text-4" id="text-orgc4a4f0d">
<p>
Jusqu'ici, nous avons donné à nos variables des valeurs directement dans le code python. Comment fait-on si l'on souhaite demander une information à l'utilisateur et qu'il puisse la donner sans qu'il ait besoin de modifier le code ?
</p>

<p>
La méthode la plus simple, c'est d'utiliser la fonction <code>input()</code>. Nous utilisons déjà la fonction <code>print()</code> pour afficher du texte à l'écran mais nous verrons plus tard et en détail ce qu'est une fonction en programmation.
</p>

<p>
En anglais, "input" signifie "entrée". La fonction <code>input()</code> sert à récupérer une "entrée utilisateur", c'est-à-dire les informations que l'utilisateur (celui qui utilise le programme) donne à l'ordinateur. Pour le moment, les informations seront seulement des caractères que l'utilisateur tapera au clavier. Lorsque nous utiliserons <code>input()</code>, l'utilisateur pourra entrer des caractères au clavier et terminer par la touche &lt;Enter&gt; ou &lt;Entrée&gt; pour terminer. Dans le programme, nous pourrons récupérer ce que l'utilisateur a entré dans une variable pour le réutiliser.
</p>

<p>
On peut utiliser la fonction <code>input()</code> en laissant les parenthèses vides. On peut aussi y placer un message explicatif destiné à l'utilisateur. Par exemple :
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="font-weight: bold; font-style: italic;">prenom</span> = <span style="font-weight: bold;">input</span>(<span style="font-style: italic;">"Entrez votre pr&#233;nom : "</span>)
<span style="font-weight: bold;">print</span>(<span style="font-style: italic;">"Bonjour %s !"</span> % prenom)
</pre>
</div>

<p>
Résultat :
</p>

<figure id="org32ea90c">
<img src="./img/example_prenom1.png" alt="exemple prenom1" align="center" class="img" width="100%" display="block">

</figure>

<p>
<b>L'utilisateur peut entrer son prénom et appuyer sur la touche &lt;Entrée&gt; :</b>
</p>


<figure id="org94b452a">
<img src="./img/example_prenom2.png" alt="exemple prenom2" align="center" class="img" width="100%" display="block">

</figure>

<p>
La variable dans laquelle nous récupérons l'entrée utilisateur sera une chaîne de caractères. Si nous essayons de faire des opérations arithmétiques avec la valeur récupérée, cela va générer une erreur "TypeError":
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="font-weight: bold; font-style: italic;">age</span> = <span style="font-weight: bold;">input</span>(<span style="font-style: italic;">"Entrez votre &#226;ge : "</span>)
<span style="font-weight: bold;">print</span>(age + 10)
</pre>
</div>
<p>
Résultat :
</p>
<div class="org-src-container">
<pre class="src src-bash">TypeError: can only concatenate str (not <span style="font-style: italic;">"int"</span>) to str
</pre>
</div>

<p>
Ou encore :
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="font-weight: bold; font-style: italic;">age</span> = <span style="font-weight: bold;">input</span>(<span style="font-style: italic;">"Entrez votre &#226;ge : "</span>)
<span style="font-weight: bold;">print</span>(<span style="font-style: italic;">"Tu es n&#233; en %s !"</span> % (2022 - age))
</pre>
</div>
<p>
Résultat :
</p>
<div class="org-src-container">
<pre class="src src-bash">TypeError: unsupported operand type(s) <span style="font-weight: bold;">for</span> -: <span style="font-style: italic;">'int'</span> and <span style="font-style: italic;">'str'</span>
</pre>
</div>

<p>
Python génère une erreur car la variable <code>age</code> est une chaîne de caractères et non pas un nombre avec lequel on peut faire une opération. Pour résoudre ce problème, il nous suffit de convertir la valeur de retour de <code>input()</code> en nombre. Si nous voulons un nombre entier (sans virgule), il faut utiliser <code>int()</code>. Si nous souhaitons récupérer un nombre décimal (à virgule), nous devons utiliser <code>float()</code>.
Exemple pour convertir en un nombre entier :
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="font-weight: bold; font-style: italic;">age</span> = <span style="font-weight: bold;">int</span>(<span style="font-weight: bold;">input</span>(<span style="font-style: italic;">"Entrez votre &#226;ge : "</span>))
<span style="font-weight: bold;">print</span>(<span style="font-style: italic;">"Tu es n&#233; en %s !"</span> % (2022 - age))
</pre>
</div>

<p>
Pour le moment, cela suffira pour créer des programmes plus intéractifs, mais nous reverrons plus en détail les conversions en python dans le chapitre 4 (cours 13).
</p>
</div>
</div>
<div id="outline-container-org4ec5a21" class="outline-4">
<h4 id="org4ec5a21">Exercices</h4>
<div class="outline-text-4" id="text-org4ec5a21">
<ol class="org-ol">
<li>Dans un programme nommé <code>carte_identite.py</code> :
<ul class="org-ul">
<li>Pour chaque information à demander à l'utilisateur, il faudra utiliser <code>input()</code> avec une question appropriée.</li>
<li>Récupère dans une variable <code>prenom</code> le prénom de l'utilisateur.</li>
<li>Récupère dans une variable <code>nom</code> le nom de l'utilisateur.</li>
<li>Récupère dans une variable <code>age</code> l'âge de l'utilisateur.</li>
<li>Récupère dans une variable <code>taille</code> la taille de l'utilisateur.</li>
<li>Récupère dans une variable <code>nationalite</code> la nationalité de l'utilisateur.</li>
<li>Affiche <b>"Je m'appelle &lt;prenom&gt; &lt;nom&gt;, j'ai &lt;age&gt; ans, je fais &lt;taille&gt;cm et mon pays d'origine est &lt;nationalite&gt;."</b></li>
</ul></li>
</ol>
</div>
</div>
</div>
</div>

<div id="outline-container-chapitre3" class="outline-2">
<h2 id="chapitre3">Chapitre 3 : Turtle</h2>
<div class="outline-text-2" id="text-chapitre3">
</div>
<div id="outline-container-chapitre3_cours9" class="outline-3">
<h3 id="chapitre3_cours9">Cours 9 : Turtle</h3>
<div class="outline-text-3" id="text-chapitre3_cours9">
</div>
<div id="outline-container-orga6596e0" class="outline-4">
<h4 id="orga6596e0">Manuel</h4>
<div class="outline-text-4" id="text-orga6596e0">
<ul class="org-ul">
<li><b>"Dessiner avec une tortue"</b>, p.49-56</li>
</ul>
</div>
</div>
<div id="outline-container-org55bd3ac" class="outline-4">
<h4 id="org55bd3ac">Exercices</h4>
<div class="outline-text-4" id="text-org55bd3ac">
<ol class="org-ol">
<li>Dans un programme nommé <code>carré.py</code>, fais dessiner un carré à une tortue.</li>
<li>Dans un programme nommé <code>hexagone.py</code>, fais dessiner un hexagone à une tortue.</li>
<li>Dans un programme nommé <code>etoile.py</code>, fais dessiner une étoile à une tortue.</li>
<li>Dans un programme nommé <code>etoile_variable.py</code>, fais dessiner une étoile à 5 branches à une tortue. Cependant, cette fois-ci il doit y avoir une variable nommée <code>taille_cote</code> qui doit être utilisée pour déterminer la taille des côtés de l'étoile. Par exemple, si <code>taille_cote</code> vaut 1, l'étoile sera composée de segments de 1 pixel de long. Si <code>taille_cote</code> vaut 100, l'étoile sera composée de segments de 100 pixels.</li>
<li>Dans un programme nommé <code>visage.py</code>, fais dessiner un visage à une tortue. Le visage doit contenir au moins deux yeux, un nez et une bouche.</li>
</ol>
</div>
</div>
</div>
</div>

<div id="outline-container-chapitre4" class="outline-2">
<h2 id="chapitre4">Chapitre 4 : Les conditions</h2>
<div class="outline-text-2" id="text-chapitre4">
</div>
<div id="outline-container-chapitre4_cours10" class="outline-3">
<h3 id="chapitre4_cours10">Cours 10 : if</h3>
<div class="outline-text-3" id="text-chapitre4_cours10">
</div>
<div id="outline-container-org6972a69" class="outline-4">
<h4 id="org6972a69">Manuel</h4>
<div class="outline-text-4" id="text-org6972a69">
<ul class="org-ul">
<li><b>"Poser des questions avec if et else"</b>, p. 59</li>
<li><b>"Intructions if"</b>, p.60</li>
<li><b>"Un bloc est un groupe d'instructions"</b>, p.60-62</li>
<li><b>"Des conditions pour comparer des choses"</b>, p.62-64</li>
</ul>
</div>
</div>
<div id="outline-container-orgf79f4b0" class="outline-4">
<h4 id="orgf79f4b0">Exercices</h4>
<div class="outline-text-4" id="text-orgf79f4b0">
<ol class="org-ol">
<li>Dans un programme nommé <code>boutique.py</code> :
<ul class="org-ul">
<li>Demande à l'utilisateur un nombre entier correspondant à la somme d'argent qu'il a et stocke sa réponse dans une variable <code>euros</code>.</li>
<li>Si <code>euros</code> est supérieure à 2, le programme doit afficher "Tu peux t'acheter des chewing-gums" puis enlever 2 à <code>euros</code>.</li>
<li>Si <code>euros</code> est supérieure à 30, le programme devra aussi afficher "Tu peux t'acheter des légos" puis enlever 30 à <code>euros</code>.</li>
<li>Si <code>euros</code> est supérieure à 350, le programme devra aussi afficher "Tu peux t'acheter une playstation" puis enlever 350 à <code>euros</code>.</li>
<li>Si <code>euros</code> est supérieure à 5000000, le programme devra aussi afficher "Tu es trop riche et tu donnes toute ta fortune !" puis <code>euros</code> devra être mise à 0.</li>
<li>Enfin, affiche "Il te reste &lt;euros&gt;" en remplaçant <code>euros</code> par ce qu'il y a dans la variable.</li>
</ul></li>

<li>Dans un programme nommé <code>montagnes_russes.py</code> :
<ul class="org-ul">
<li>Demande à l'utilisateur son âge puis sa taille et stocke ses réponses dans des variables <code>age</code> et <code>taille</code>.</li>
<li>Crée une condition qui affiche "Tu es trop jeune pour faire les montagnes russes." si <code>age</code> est strictement inférieure à 7 ans.</li>
<li>Crée une condition qui affiche "Tu as le bon âge pour faire les montagnes russes." si <code>age</code> est supérieure ou égale à 7 ans.</li>
<li>Crée une condition qui affiche "Tu es trop petit pour faire les montagnes russes." si <code>taille</code> est strictement inférieure à 60cm.</li>
<li>Crée une condition qui affiche "Tu es trop petit pour faire les montagnes russes sans être accompagné." si <code>taille</code> est entre 60cm inclus et 80cm exclus.</li>
<li>Crée une condition qui affiche "Tu as la bonne taille pour faire les montagnes russes sans être accompagné." si <code>taille</code> est supérieure ou égale à 80cm.</li>
</ul></li>

<li>Dans un programme nommé <code>formes.py</code> :
<ul class="org-ul">
<li>Demande à l'utilisateur un nombre entier que tu stockeras dans une variable <code>nb_cotes</code>.</li>
<li>Demande à l'utilisateur un autre nombre entier que tu stockeras dans une variable <code>taille_cote</code>.</li>
<li>Si <code>nb_cotes</code> est égale à 3, une tortue doit dessiner un triangle dont les côtés sont égaux à <code>taille_cote</code>.</li>
<li>Si <code>nb_cotes</code> est égale à 4, une tortue doit dessiner un carré dont les côtés sont égaux à <code>taille_cote</code>.</li>
<li>Si <code>nb_cotes</code> est égale à 5, une tortue doit dessiner un pentagone dont les côtés doivent être égaux à <code>taille_cote</code>.</li>
<li>Si <code>nb_cotes</code> est strictement inférieure à 3, affiche "Nombre de côtés trop petit.".</li>
<li>Si <code>nb_cotes</code> est strictement supérieure à 5, affiche "Nombre de côtés trop grand.".</li>
</ul></li>
</ol>
</div>
</div>
</div>

<div id="outline-container-chapitre4_cours11" class="outline-3">
<h3 id="chapitre4_cours11">Cours 11 : if, elif, else</h3>
<div class="outline-text-3" id="text-chapitre4_cours11">
</div>
<div id="outline-container-org4365402" class="outline-4">
<h4 id="org4365402">Manuel</h4>
<div class="outline-text-4" id="text-org4365402">
<ul class="org-ul">
<li><b>"Instructions si-alors-sinon"</b>, p.64-65</li>
<li><b>"Instructions if et elif"</b>, p.65-66</li>
</ul>
</div>
</div>
<div id="outline-container-org7f1cb12" class="outline-4">
<h4 id="org7f1cb12">Exercices</h4>
<div class="outline-text-4" id="text-org7f1cb12">
<ol class="org-ol">
<li>Dans un programme nommé <code>dragon.py</code> :
<ul class="org-ul">
<li>Affiche "Tu te trouves dans une pièce obscure d'un mystérieux château.".</li>
<li>Affiche "Tu dois choisir entre trois portes. Choisis 1, 2 ou 3&#x2026; " et récupère la réponse de l'utilisateur dans une variable <code>choix</code>.</li>
<li>Si le joueur a choisi la porte 1, affiche "Tu as trouvé un trésor, tu es riche !".</li>
<li>Si le joueur a choisi la porte 2, affiche "La porte s'ouvre et un ogre affamé te donne un coup de massue. Perdu !".</li>
<li>Si le joueur a choisi la porte 3, affiche "Il y a un dragon dans cette pièce. Le dragon se réveille et te mange. Il te trouve délicieux&#x2026; Perdu !".</li>
<li>Si le joueur a choisi autre chose, affiche "Désolé, il faut entrer 1, 2 ou 3.".</li>
</ul></li>

<li>Dans un programme nommé <code>endroit_secret.py</code> :
<ul class="org-ul">
<li>Crée une variable <code>mot_secret</code> égale au mot de ton choix.</li>
<li>Crée une variable <code>humeur_gardien</code> égale à un entier entre 0 et 10.</li>
<li>Demande à l'utilisateur d'entrer son mot secret et stocke-le dans une variable <code>mot_utilisateur</code>.</li>
<li>En utilisant <code>if</code>, <code>elif</code> et <code>else</code>, implémente les conditions suivantes :
<ul class="org-ul">
<li>Si le <code>mot_utilisateur</code> est égal au <code>mot_secret</code>, affiche "Bienvenue, vous êtes VIP !".</li>
<li>Si le <code>mot_utilisateur</code> est différent de <code>mot_secret</code>, il y a 3 possibilités :
<ul class="org-ul">
<li>Soit le gardien est de mauvaise humeur (<code>humeur_gardien</code> inférieure à 3). Dans ce cas, affiche "Veuillez procéder à une vérification des papiers.".</li>
<li>Soit le gardien est de bonne humeur (<code>humeur_gardien</code> supérieure à 7). Dans ce cas, affiche "Bienvenue, mais vous n'êtes pas VIP.".</li>
<li>Soit le gardien est neutre. Dans ce cas, affiche "Veuillez prendre connaissance des règles avant d'entrer.".</li>
</ul></li>
</ul></li>
</ul></li>
</ol>
</div>
</div>
</div>

<div id="outline-container-chapitre4_cours12" class="outline-3">
<h3 id="chapitre4_cours12">Cours 12 : and, or</h3>
<div class="outline-text-3" id="text-chapitre4_cours12">
</div>
<div id="outline-container-org97d653a" class="outline-4">
<h4 id="org97d653a">Manuel</h4>
<div class="outline-text-4" id="text-org97d653a">
<ul class="org-ul">
<li><b>"Combiner des conditions"</b>, p.66</li>
</ul>
</div>
</div>
<div id="outline-container-org3b0b5a0" class="outline-4">
<h4 id="org3b0b5a0">Exercices</h4>
<div class="outline-text-4" id="text-org3b0b5a0">
<ol class="org-ol">
<li>Dans un programme nommé <code>montagnes_russes2.py</code> :
<ul class="org-ul">
<li>Demande à l'utilisateur son âge puis sa taille et stocke ses réponses dans des variables <code>age</code> et <code>taille</code>.</li>
<li>En utilisant seulement deux <code>if</code> et en utilisant <code>and</code> et <code>or</code>, implémente les conditions suivantes :
<ul class="org-ul">
<li>Si <code>age</code> est supérieure ou égale à 7 et <code>taille</code> est supérieure ou égale à 80, affiche "Tu peux faire les montagnes russes.".</li>
<li>Si <code>age</code> est inférieure à 7 ou <code>taille</code> est inférieure à 80, affiche "Tu ne peux pas faire les montagnes russes.".</li>
</ul></li>
</ul></li>
</ol>
</div>
</div>
</div>

<div id="outline-container-chapitre4_cours13" class="outline-3">
<h3 id="chapitre4_cours13">Cours 13 : Types de données et conversions</h3>
<div class="outline-text-3" id="text-chapitre4_cours13">
</div>
<div id="outline-container-org75456e8" class="outline-4">
<h4 id="org75456e8">Manuel</h4>
<div class="outline-text-4" id="text-org75456e8">
<ul class="org-ul">
<li><b>"Variables sans valeur : None"</b>, p.66-67</li>
<li><b>"Différence entre chaînes et nombres"</b>, p.67-69</li>
</ul>
</div>
</div>
<div id="outline-container-org98b6db8" class="outline-4">
<h4 id="org98b6db8">Exercices</h4>
<div class="outline-text-4" id="text-org98b6db8">
<ol class="org-ol">
<li>Dans un programme nommé <code>types_donnees.py</code> :
<ul class="org-ul">
<li>Crée une variable <code>nb_str</code> contenant une chaîne convertible en nombre.</li>
<li>Crée une variable <code>nb_int</code> contenant la conversion en nombre entier de <code>nb_str</code>.</li>
<li>Crée une variable <code>nb_float</code> contenant la conversion en nombre flottant de <code>nb_str</code>.</li>
<li>Crée une variable <code>nb_int2</code> contenant un nombre entier de ton choix.</li>
<li>Crée une variable <code>nb_str2</code> contenant la conversion en chaîne de <code>nb_int2</code>.</li>
<li>Affiche toutes les variables.</li>
</ul></li>
</ol>
</div>
</div>
</div>
</div>

<div id="outline-container-chapitre5" class="outline-2">
<h2 id="chapitre5">Chapitre 5 : Les boucles</h2>
<div class="outline-text-2" id="text-chapitre5">
</div>
<div id="outline-container-chapitre5_cours14" class="outline-3">
<h3 id="chapitre5_cours14">Cours 14 : Les boucles for</h3>
<div class="outline-text-3" id="text-chapitre5_cours14">
</div>
<div id="outline-container-org38f8e77" class="outline-4">
<h4 id="org38f8e77">Manuel</h4>
<div class="outline-text-4" id="text-org38f8e77">
<ul class="org-ul">
<li><b>"Tourner en boucle"</b>, p.73</li>
<li><b>"Utiliser les boucles for"</b>, p.74-80</li>
</ul>
</div>
</div>
<div id="outline-container-org9e524f9" class="outline-4">
<h4 id="org9e524f9">Exercices</h4>
<div class="outline-text-4" id="text-org9e524f9">
<ol class="org-ol">
<li>Dans un programme nommé <code>repetition.py</code> :
<ul class="org-ul">
<li>Demande à l'utilisateur un nombre entier et stocke-le dans une variable <code>nombre</code>.</li>
<li>Fais une boucle <code>for</code> qui affiche <code>nombre</code> fois "Je n'aurais plus jamais besoin de me répéter".</li>
<li>Fais une boucle <code>for</code> qui affiche tous les nombres de 0 à <code>nombre</code> inclus.</li>
<li>Fais une boucle <code>for</code> qui affiche tous les nombres de 0 à <code>nombre</code> exclus.</li>
<li>Crée une liste <code>liste</code>.</li>
<li>Fais une boucle <code>for</code> qui demande <code>nombre</code> fois à l'utilisateur d'entrer un mot qui s'ajoutera à la liste.</li>
<li>Fais une boucle <code>for</code> qui affiche chaque élément de la liste ligne par ligne.</li>
</ul></li>

<li>Dans un programme nommé <code>pairs.py</code> :
<ul class="org-ul">
<li>Affiche tous les nombres pairs de 0 à 20 en utilisant une boucle <code>for</code>.</li>
</ul></li>

<li>Dans un programme nommé <code>repetortue.py</code> :
<ul class="org-ul">
<li>Crée deux variables : <code>distance</code> et <code>angle</code> et demande à l'utilisateur d'entrer leurs valeurs (nombres entiers uniquement).</li>
<li>Dans une boucle <code>for</code>, fais avancer la tortue de <code>distance</code> pixels et fais-la tourner de <code>angle</code> degrés.</li>
<li>Essaie différentes valeurs pour <code>distance</code> et <code>angle</code> pour voir ce qu'il se passe de différent.</li>
</ul></li>

<li>Dans un programme nommé <code>cercle.py</code> :
<ul class="org-ul">
<li>Fais dessiner à une tortue un cercle à l'aide d'une boucle <code>for</code>.</li>
</ul></li>

<li>Dans un programme <code>spirale.py</code> :
<ul class="org-ul">
<li>Fais dessiner à une tortue une spirale à l'aide d'une boucle <code>for</code>.</li>
</ul></li>

<li>Dans un programme nommé <code>fibonacci.py</code> :
<ul class="org-ul">
<li><p>
Fais un programme qui calcule les 10 premiers nombres de la suite de fibonacci en utilisant une boucle <code>for</code>.
</p>
<p target="_blank">
<a href="https://fr.wikipedia.org/wiki/Suite_de_Fibonacci" target="_blank">La suite de Fibonacci</a> est : 0, 1, 1, 2, 3, 5, 8,&#x2026; <b>Les deux premiers nombres de la suite sont toujours 0 et 1, ensuite chaque nombre est égal à la somme des deux précédents</b>.
</p></li>
<li>(BONUS) : Fais avancer une tortue de chaque valeur de la suite de Fibonacci en la faisant tourner à chaque fois de 90&deg;.</li>
</ul></li>
</ol>
</div>
</div>
</div>

<div id="outline-container-chapitre5_cours15" class="outline-3">
<h3 id="chapitre5_cours15">Cours 15 : Boucles while</h3>
<div class="outline-text-3" id="text-chapitre5_cours15">
</div>
<div id="outline-container-org66381b2" class="outline-4">
<h4 id="org66381b2">Manuel</h4>
<div class="outline-text-4" id="text-org66381b2">
<ul class="org-ul">
<li><b>"Tant que nous parlons de boucles : while"</b>, p.81-83</li>
</ul>
</div>
</div>
<div id="outline-container-org3d62be6" class="outline-4">
<h4 id="org3d62be6">Exercices</h4>
<div class="outline-text-4" id="text-org3d62be6">
<ol class="org-ol">
<li>Dans un programme nommé <code>repetition_while.py</code> :
<ul class="org-ul">
<li>Demande à l'utilisateur un nombre entier et stocke-le dans une variable <code>nombre</code>.</li>
<li>Fais une boucle <code>while</code> qui affiche <code>nombre</code> fois "Je n'aurais plus jamais besoin de me répéter".</li>
<li>Fais une boucle <code>while</code> qui affiche tous les nombres de 0 à <code>nombre</code> inclus.</li>
<li>Fais une boucle <code>while</code> qui affiche tous les nombres de 0 à <code>nombre</code> exclus.</li>
<li>Crée une liste <code>liste</code>.</li>
<li>Fais une boucle <code>while</code> qui demande <code>nombre</code> fois à l'utilisateur d'entrer un mot qui s'ajoutera à la liste.</li>
<li>Fais une boucle <code>while</code> qui affiche chaque élément de la liste ligne par ligne.</li>
</ul></li>

<li>Dans un programme nommé <code>compte_a_rebours.py</code> :
<ul class="org-ul">
<li>Demande à l'utilisateur un nombre entier de son choix et stocke-le dans une variable <code>nombre</code></li>
<li>Fais une boucle <code>while</code> qui, tant que <code>nombre</code> est strictement supérieur à 0 :
<ul class="org-ul">
<li>Affiche <code>nombre</code> - 1</li>
<li>Demande à l'utilisateur s'il veut continuer. Si l'utilisateur tape <b>'non'</b>, alors le programme s'arrête.</li>
<li>Sinon, <code>nombre</code> prend la valeur <code>nombre</code> - 1</li>
</ul></li>
</ul></li>
</ol>
</div>
</div>
</div>
</div>

<div id="outline-container-chapitre6" class="outline-2">
<h2 id="chapitre6">Chapitre 6 : Mise en pratique</h2>
<div class="outline-text-2" id="text-chapitre6">
</div>
<div id="outline-container-chapitre6_cours16" class="outline-3">
<h3 id="chapitre6_cours16">Cours 16 : Nombre secret</h3>
<div class="outline-text-3" id="text-chapitre6_cours16">
</div>

<div id="outline-container-org3eacf41" class="outline-4">
<h4 id="org3eacf41">Indication pour générer un nombre aléatoire</h4>
<div class="outline-text-4" id="text-org3eacf41">
<p>
Pour générer un nombre aléatoire, tu dois d'abord importer le module <code>random</code>. Il faut toujours importer les modules en début de programme pour plus de clarté :
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="font-weight: bold;">import</span> random
</pre>
</div>

<p>
Ensuite, pour générer le nombre et le stocker, tu dois utiliser la fonction <code>random.randint(min, max)</code>. <code>min</code> et <code>max</code> sont les valeurs minimale et maximale du nombre aléatoire souhaité.
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="font-weight: bold; font-style: italic;">nombre</span> = random.randint(0, 10)
</pre>
</div>
</div>
</div>

<div id="outline-container-orge0ccb48" class="outline-4">
<h4 id="orge0ccb48">Exercice</h4>
<div class="outline-text-4" id="text-orge0ccb48">
<p>
Dans un programme nommé <code>nombre_secret.py</code> :
</p>
<ul class="org-ul">
<li>Fais un jeu où l'ordinateur choisit un nombre aléatoire et le joueur doit le deviner.</li>
<li>Le programme doit choisir un nombre aléatoire entre 1 et 10 en utilisant la fonction vue avant.</li>
<li>Le joueur doit avoir 4 essais pour deviner le nombre.</li>
<li>Une fois qu'une partie est terminée (gagnée ou perdue), le programme doit demander à l'utilisateur s'il souhaite rejouer et relancer une partie si celui-ci répond <code>"oui"</code>.</li>
<li>Le nombre d'essai et le minimum et maximum du nombre secret doivent être stockés dans des variables au début du programme et qui doivent être utilisées au bon endroit dans le programme afin de permettre de choisir le nombre d'essai, le minimum et le maximum en changeant seulement les variables au début du programme.</li>
<li>A chaque essai, le programme doit :
<ul class="org-ul">
<li>Demander au joueur de trouver le nombre situé entre <code>minimum</code> et <code>maximum</code>.</li>
<li>Si le nombre entré par le joueur est le bon, le jeu doit féliciter le joueur.</li>
<li>Si le nombre entré est plus petit ou plus grand, le jeu doit informer le joueur et commencer un nouvel essai s'il en reste au joueur.</li>
<li>Si le nombre n'est pas le bon est qu'il s'agissait du dernier essai, le jeu doit informer le joueur qu'il a perdu.</li>
</ul></li>
</ul>
</div>
</div>

<div id="outline-container-org40314f4" class="outline-4">
<h4 id="org40314f4">BONUS</h4>
<div class="outline-text-4" id="text-org40314f4">
<ul class="org-ul">
<li>Si le joueur a gagné, le jeu doit se relancer avec une plus grande difficulté (moins d'essais, nombre secret maximum plus grand, &#x2026;)</li>
<li>Si le joueur a perdu, le jeu doit baisser la difficulté ou retourner à la difficulté originale.</li>
<li>Des messages cachés qui ne s'affichent que si l'on réussit un certain niveau ou si on trouve le nombre secret du premier coup.</li>
</ul>
</div>
</div>
</div>
</div>

<div id="outline-container-chapitre7" class="outline-2">
<h2 id="chapitre7">Chapitre 7 : Les fonctions</h2>
<div class="outline-text-2" id="text-chapitre7">
</div>
<div id="outline-container-chapitre7_cours17" class="outline-3">
<h3 id="chapitre7_cours17">Cours 17 : Fonctions</h3>
<div class="outline-text-3" id="text-chapitre7_cours17">
</div>
<div id="outline-container-orgf113a40" class="outline-4">
<h4 id="orgf113a40">Manuel</h4>
<div class="outline-text-4" id="text-orgf113a40">
<ul class="org-ul">
<li><b>"Recycler du code avec des fonctions et des modules"</b>, p.87-88</li>
<li><b>"Utiliser des fonctions"</b>, p.88-89</li>
<li><b>"Qu'est-ce qu'une fonction ?"</b>, p.89-90</li>
<li><b>"Variables et portée"</b>, p.90-92</li>
<li><b>"La fonction len"</b>, p.121-122</li>
</ul>
</div>
</div>
<div id="outline-container-org9ba97bc" class="outline-4">
<h4 id="org9ba97bc">Exercices</h4>
<div class="outline-text-4" id="text-org9ba97bc">
<ol class="org-ol">
<li>Dans un programme nommé <code>fonctions1.py</code> :
<ul class="org-ul">
<li>Définis une fonction ayant la signature <code>bonjour(prenom, nom)</code> qui doit <b>afficher</b> "Bonjour &lt;prenom&gt; &lt;nom&gt; !", en remplaçant &lt;prenom&gt; et &lt;nom&gt; par les arguments passés à la fonction.</li>
<li>Définis une fonction <code>somme(nombre1, nombre2)</code> qui <b>retourne</b> la somme des deux arguments.</li>
<li>Définis une fonction <code>minimum(nombre1, nombre2)</code> qui <b>retourne</b> le plus petit nombre entre les deux arguments.</li>
<li>Définis une fonction <code>puissance(nombre1, nombre2)</code> qui <b>retourne</b> <code>nombre1</code> puissance <code>nombre2</code>.</li>
<li>Définis une fonction fibonacci(n) qui <b>retourne</b> le n-ième nombre de la suite de Fibonacci. Exemples : <code>fibonacci(0)</code> &rarr; <b>0</b>, <code>fibonacci(1)</code> &rarr; <b>1</b>, <code>fibonacci(2)</code> &rarr; <b>1</b>, <code>fibonacci(3)</code> &rarr; <b>2</b>, etc.</li>
<li>Appelle chaque fonction avec les paramètres de ton choix afin de vérifier qu'elles fonctionnent correctement. *Pour afficher le résultat des fonctions qui retournent quelque-chose, il suffit d'utiliser <code>print()</code> lors de l'appel de celles-ci.</li>
</ul></li>
<li>Dans un programme nommé <code>menu.py</code> :
<ul class="org-ul">
<li>Reprends (copie-colle) les fonctions créées dans l'exercice précédent.</li>
<li>Définis une fonction <code>menu()</code> qui :
<ul class="org-ul">
<li>Affiche le nom de toutes les fonctions précédemment créées et demande à l'utilisateur quelle fonction il veut utiliser.</li>
<li>Si l'utilisateur entre 'bonjour' :
<ul class="org-ul">
<li>Demande à l'utilisateur son prénom et son nom, stocke-les et appelle la fonction <code>bonjour(prenom, nom)</code> avec ce qu'a entré l'utilisateur</li>
</ul></li>
<li>Si l'utilisateur entre 'somme', 'minimum' ou 'puissance' :
<ul class="org-ul">
<li>Demande à l'utilisateur deux nombres et stocke-les dans des variables.</li>
<li>Appelle la fonction <code>somme(nombre1, nombre2)</code>, <code>minimum(nombre1, nombre2)</code> ou <code>puissance(nombre1, nombre2)</code> en fonction du choix de l'utilisateur.</li>
</ul></li>
<li>Si l'utilisateur entre 'fibonacci' :
<ul class="org-ul">
<li>Demande à l'utilisateur un nombre et appelle la fonction <code>fibonnaci(n)</code> avec celui-ci</li>
</ul></li>
<li>Tant que l'utilisateur n'entre pas 'quitter', il faut que la fonction propose les choix à nouveau à l'utilisateur.</li>
<li>Appelle la fonction <code>menu()</code> dans ton programme.</li>
</ul></li>
</ul></li>

<li>Dans un programme nommé <code>forme.py</code> :
<ul class="org-ul">
<li>Définis une fonction <code>forme(nb_cotes, taille_cotes)</code> qui dessine une forme en utilisant une tortue. La forme doit avoir <code>nb_cotes</code> en nombre de côtés et la taille doit être égale à <code>taille_cotes</code>.</li>
<li>Appele plusieurs fois la fonction avec des arguments différents pour tout bien tester.</li>
</ul></li>

<li>Dans un programme nommé <code>forme_aleatoire.py</code> :
<ul class="org-ul">
<li>Définis une fonction ayant la signature <code>forme_aleatoire(tortue)</code>.</li>
<li>La fonction doit définir une variable <code>repetition</code> égale à un nombre aléatoire entre 50 et 200.</li>
<li>La fonction doit définir une variable <code>distance</code> égale à un nombre aléatoire entre 10 et 200.</li>
<li>Le programme doit définir une variable <code>angle</code> égale à un nombre aléatoire en 0 et 360.</li>
<li>La forme aléatoire doit être dessinée par la <code>tortue</code> passée en argument en répétant <code>repetition</code> fois le fait d'avancer de <code>distance</code> pixels et de tourner d'<code>angle</code> degrés.</li>
<li>Pour tester, appelle plusieurs fois cette fonction avec des tortues différentes.</li>
</ul></li>

<li>Dans un programme nommé <code>inverse.py</code> :
<ul class="org-ul">
<li>Définis une fonction ayant la signature <code>inverse(liste)</code> qui doit renvoyer la <code>liste</code> passée en argument à l'envers. Par exemple, si on lui donne la liste <code>[1, 5, 2, 6]</code> en argument, elle doit renvoyer <code>[6, 2, 5, 1]</code>.</li>
<li>Appelle la fonction plusieurs fois avec des listes différentes pour bien tester tous les cas.</li>
<li>Essaie de passer une chaîne de caractères en argument. Que se passe-t-il ?</li>
</ul></li>

<li>Dans un programme nommé <code>minimum_liste.py</code> :
<ul class="org-ul">
<li>Définis une fonction ayant la signature <code>minimum_liste(liste_nombres)</code> qui prend une liste de nombre en paramètre et renvoie le plus petit nombre de la liste.</li>
<li>Appeler plusieurs fois la fonction avec différentes listes de nombres pour bien tester tous les cas.</li>
</ul></li>

<li><p>
Dans un programme nommé <code>tri.py</code> :
</p>
<ul class="org-ul">
<li>Faire une fonction ayant la signature <code>tri(liste_nombres)</code>.</li>
<li>Le paramètre <code>liste_nombres</code> sera une liste de nombres.</li>
<li>La fonction doit renvoyer une liste qui contient tous les nombres de <code>liste_nombres</code> triés dans l'ordre croissant.</li>
<li>Appeler plusieurs fois la fonction avec différentes listes de nombres pour tester tous les cas.</li>
</ul>
<p>
(BONUS)
</p>
<ul class="org-ul">
<li>Définis une fonction <code>creerListe(taille)</code> qui crée une liste de taille <code>taille</code> en demandant à l'utilisateur chaque nombre de la liste et renvoie la liste ainsi créée.</li>
<li>Appelle la fonction <code>creerListe</code> après avoir demandé la <code>taille</code> à l'utiliateur puis utilise la liste créée dans la fonction <code>tri</code>. Affiche la liste avant et après avoir utilisé <code>tri</code>.</li>
</ul></li>
</ol>
</div>
</div>
</div>

<div id="outline-container-chapitre7_cours18" class="outline-3">
<h3 id="chapitre7_cours18">Cours 18 : Les modules</h3>
<div class="outline-text-3" id="text-chapitre7_cours18">
</div>
<div id="outline-container-org2921c24" class="outline-4">
<h4 id="org2921c24">Cours</h4>
<div class="outline-text-4" id="text-org2921c24">
<p>
<b>Un module</b> sert à regrouper des fonctions, des variables et d'autres choses dans des programmes plus vastes et plus puissants. Certains modules sont intégrés dans Python lui-même, tandis que tu peux en télécharger d'autres de manière séparée. Nous en avons déjà utilisé par exemple avec <b>turtle</b> et <b>random</b>.
</p>

<p>
Pour utiliser un module, il suffit d'écrire au début du fichier <code>import nom_du_module</code>. Dans le cas où tu voudrais utiliser un module qui n'est pas intégré à Python, il faudra d'abord le télécharger (ou le coder !).
</p>

<p>
Maintenant, si je te disais que tu peux créer tes propres modules avec tes propres fonctions, variables, classes dedans !? Ne serait-il pas pratique de pouvoir utiliser sans avoir à la réécrire une fonction qui, par exemple, permet de demander un entier à l'utilisateur et de vérifier qu'il n'y a pas d'erreur ?
</p>

<p>
Pour créer ton propre module, il suffit de :
</p>
<ol class="org-ol">
<li>Créer un nouveau fichier et lui donner le nom de ton module, par exemple <code>mes_fonctions.py</code>.</li>
<li>Écrire tes fonctions à l'intérieur du fichier, autant que tu veux. <b>Attention, nous voulons seulement écrire les fonctions, pas les utiliser tout de suite.</b></li>
<li>Une fois le fichier enregistré, il suffit de le mettre dans le même <b>dossier</b> que le programme dans lequel tu vas l'utiliser puis de l'importer avec <code>import mes_fonctions</code> dans le programme.</li>
<li>Pour utiliser une fonction du module <code>mes_fonctions</code>, il faudra l'appeler en utilisant <code>mes_fonctions.&lt;nom_de_la_fonction&gt;(paramètres)</code>.</li>
<li>Pour ne plus avoir besoin d'écrire le nom du module, il faut remplacer <code>import mes_fonctions</code> par <code>from mes_fonctions import *</code>.</li>
</ol>
</div>
</div>

<div id="outline-container-org0bb175f" class="outline-4">
<h4 id="org0bb175f">Exercices</h4>
<div class="outline-text-4" id="text-org0bb175f">
<p>
Dans le chapitre suivant, nous allons mettre en pratique les modules et les fonctions ensemble en créant notre propre bibliothèque personnalisée de fonctions !
</p>

<ol class="org-ol">
<li>Dans un fichier nommé <code>mes_fonctions.py</code> :
<ul class="org-ul">
<li>Crée la fonction <code>demander_int(message)</code> qui :
<ul class="org-ul">
<li>demande un entier à l'utilisateur en affichant le message <code>message</code>.</li>
<li>retourne l'entier convertit en <code>int</code>.</li>
</ul></li>
<li>Crée la fonction <code>demander_float(message)</code> qui fonctionne comme la précédente mais avec un <code>float</code>.</li>
<li>Crée la fonction <code>demander(message)</code> qui fonctionne comme les précédentes mais avec une chaîne de caractères.</li>
</ul></li>

<li>Dans un programme nommé <code>tests_fonctions.py</code> :
<ul class="org-ul">
<li>importe ton module <code>mes_fonctions</code></li>
<li>teste les 3 fonctions présentes dans ton module</li>
</ul></li>
</ol>

<p>
Tu as maintenant créé les 3 premières fonctions de ton propre module, que tu pourras réutiliser chaque fois que tu en as besoin. Tu es libre d'y ajouter les fonctions qui te semblent intéressantes et que tu as déjà écrites, par exemple dans ce chapitre.
</p>
</div>
</div>
</div>
</div>

<div id="outline-container-chapitre7bis" class="outline-2">
<h2 id="chapitre7bis">Chapitre 7bis : Turtle avec les fonctions</h2>
<div class="outline-text-2" id="text-chapitre7bis">
</div>
<div id="outline-container-chapitre7bis_cours17b" class="outline-3">
<h3 id="chapitre7bis_cours17b">Cours 17b : Un peu plus de turtle</h3>
<div class="outline-text-3" id="text-chapitre7bis_cours17b">
<p>
Nous avons vu précédemment les bases du module turtle. En réalité, il existe encore beaucoup de fonctionnalités que nous n'avons pas encore explorées.
</p>
</div>
<div id="outline-container-org9289262" class="outline-4">
<h4 id="org9289262">Les couleurs</h4>
<div class="outline-text-4" id="text-org9289262">
<p>
Pour commencer, nous pouvons changer toutes les couleurs : l'arrière-plan, le trait et même le remplissage ! Turtle propose beaucoup de couleurs et libre à toi de les essayer. En voici une liste non-exhaustive.
</p>

<figure id="orgafc8c55">
<img src="./img/colors_turtle.jpg" alt="colors turtle" align="center" class="img" width="570px" height="624hpx" display="block">

</figure>
</div>
</div>

<div id="outline-container-org7d719ca" class="outline-4">
<h4 id="org7d719ca">Changer la couleur d'arrière-plan</h4>
<div class="outline-text-4" id="text-org7d719ca">
<p>
La fonction à utiliser pour changer la couleur d'arrière-plan est :
</p>
<div class="org-src-container">
<pre class="src src-python">turtle.bgcolor(<span style="font-style: italic;">"couleur"</span>) <span style="font-weight: bold; font-style: italic;"># </span><span style="font-weight: bold; font-style: italic;">Remplacer couleur par la couleur voulue</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-orgd1960ae" class="outline-4">
<h4 id="orgd1960ae">Changer la couleur du trait</h4>
<div class="outline-text-4" id="text-orgd1960ae">
<p>
La fonction à utiliser pour changer la couleur du trait est :
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="font-weight: bold; font-style: italic;">t</span> = turtle.Pen() <span style="font-weight: bold; font-style: italic;"># </span><span style="font-weight: bold; font-style: italic;">Au debut du dessin</span>
t.color(<span style="font-style: italic;">"couleur"</span>) <span style="font-weight: bold; font-style: italic;"># </span><span style="font-weight: bold; font-style: italic;">Remplacer couleur par la couleur voulue</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-orgddbdd85" class="outline-4">
<h4 id="orgddbdd85">Changer la couleur de remplissage d'une forme</h4>
<div class="outline-text-4" id="text-orgddbdd85">
<p>
Pour changer la couleur de remplissage d'une forme, il y a plusieurs étapes à respecter.
</p>
<ol class="org-ol">
<li><p>
Il faut d'abord choisir la couleur à l'aide de
</p>
<div class="org-src-container">
<pre class="src src-python">t.color()
</pre>
</div></li>
<li><p>
Ensuite, lorsque l'on commence à dessiner la forme à remplir, il faut utiliser la fonction
</p>
<div class="org-src-container">
<pre class="src src-python">t.begin_fill()
</pre>
</div></li>
<li><p>
Enfin, lorsque la forme à remplir est terminée, il faut utiliser la fonction
</p>
<div class="org-src-container">
<pre class="src src-python">t.end_fill()
</pre>
</div></li>
</ol>

<p>
Exemple :
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="font-weight: bold;">import</span> turtle

<span style="font-weight: bold; font-style: italic;">t</span> = turtle.Pen()
t.color(<span style="font-style: italic;">"cyan"</span>)
t.begin_fill()
t.forward(50)
t.left(90)
t.forward(50)
t.left(90)
t.forward(50)
t.left(90)
t.forward(50)
t.end_fill()
</pre>
</div>


<figure id="org3e68d53">
<img src="./img/turtle_square.png" alt="turtle square" align="center" class="img" width="155px" height="145hpx" display="block">

</figure>
</div>
</div>

<div id="outline-container-org7ce8fd3" class="outline-4">
<h4 id="org7ce8fd3">La vitesse</h4>
<div class="outline-text-4" id="text-org7ce8fd3">
<p>
Il est possible de changer la vitesse d'exécution d'un dessin avec turtle en utilisant la fonction
</p>
<div class="org-src-container">
<pre class="src src-python">t.speed(vitesse) <span style="font-weight: bold; font-style: italic;"># </span><span style="font-weight: bold; font-style: italic;">Remplacer vitesse par un int compris entre 0-10</span>
</pre>
</div>

<p>
La vitesse la plus rapide est&#x2026; <code>t.speed(0)</code> !
</p>
</div>
</div>

<div id="outline-container-org2fbf9ee" class="outline-4">
<h4 id="org2fbf9ee">La taille du trait</h4>
<div class="outline-text-4" id="text-org2fbf9ee">
<p>
Tu peux changer la taille du trait avec la fonction
</p>
<div class="org-src-container">
<pre class="src src-python">t.pensize(taille) <span style="font-weight: bold; font-style: italic;"># </span><span style="font-weight: bold; font-style: italic;">Remplacer taille par un int</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-org7bf3299" class="outline-4">
<h4 id="org7bf3299">Lever ou baisser le stylo</h4>
<div class="outline-text-4" id="text-org7bf3299">
<p>
Par moments, tu peux avoir besoin de déplacer la tortue sans pour autant qu'elle trace des lignes sur sa trajectoire. Eh bien, il est possible de lui faire "lever" son stylo à l'aide de la fonction
</p>
<div class="org-src-container">
<pre class="src src-python">t.up() <span style="font-weight: bold; font-style: italic;"># </span><span style="font-weight: bold; font-style: italic;">up veut dire "haut" en anglais</span>
</pre>
</div>

<p>
Une fois que tu veux que la tortue dessine à nouveau, utilise simplement la fonction
</p>
<div class="org-src-container">
<pre class="src src-python">t.down() <span style="font-weight: bold; font-style: italic;"># </span><span style="font-weight: bold; font-style: italic;">down veut dire "bas" en anglais</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-orgc7583d4" class="outline-4">
<h4 id="orgc7583d4">Dessiner un cercle</h4>
<div class="outline-text-4" id="text-orgc7583d4">
<p>
Il est possible de dessiner un cercle rapidement a l'aide de la fonction
</p>
<div class="org-src-container">
<pre class="src src-python">t.circle(rayon) <span style="font-weight: bold; font-style: italic;"># </span><span style="font-weight: bold; font-style: italic;">Remplacer rayon par un int correspondant au rayon du cercle</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-org68a2bd5" class="outline-4">
<h4 id="org68a2bd5">Afficher ou cacher la tortue</h4>
<div class="outline-text-4" id="text-org68a2bd5">
<p>
Si tu veux cacher la forme de la tortue, tu dois utiliser la fonction
</p>
<div class="org-src-container">
<pre class="src src-python">t.hideturtle()
</pre>
</div>
<p>
Pour l'afficher à nouveau, c'est à l'aide de la fonction
</p>
<div class="org-src-container">
<pre class="src src-python">t.showturtle()
</pre>
</div>
</div>
</div>
<div id="outline-container-orga12b430" class="outline-4">
<h4 id="orga12b430">Mon beau sapin &#x2026;</h4>
<div class="outline-text-4" id="text-orga12b430">
<p>
Maintenant, mets en oeuvre tout ce que l'on vient de voir en reproduisant ce sapin de noël. Ce n'est pas grave s'il n'est pas exactement similaire, mais applique-toi à le faire le plus ressemblant possible.
</p>


<figure id="org2a3610a">
<img src="./img/xmas_tree.png" alt="xmas tree" align="center" class="img" width="701px" height="701hpx" display="block">

</figure>

<p>
Indice : les étages du sapin sont en fait des triangles superposés de tailles différentes.
</p>
</div>
</div>
</div>

<div id="outline-container-chapitre7bis_cours18b" class="outline-3">
<h3 id="chapitre7bis_cours18b">Cours 18b : Turtle, mais avec des fonctions</h3>
<div class="outline-text-3" id="text-chapitre7bis_cours18b">
</div>
<div id="outline-container-orgdf19d83" class="outline-4">
<h4 id="orgdf19d83">Manuel</h4>
<div class="outline-text-4" id="text-orgdf19d83">
<ul class="org-ul">
<li><b>"Recycler du code avec des fonctions et des modules"</b>, p.87-88</li>
<li><b>"Utiliser des fonctions"</b>, p.88-89</li>
<li><b>"Qu'est-ce qu'une fonction ?"</b>, p.89-90</li>
<li><b>"Variables et portée"</b>, p.90-92</li>
</ul>
</div>
</div>
<div id="outline-container-org86e9717" class="outline-4">
<h4 id="org86e9717">Exercices</h4>
<div class="outline-text-4" id="text-org86e9717">
<p>
Le but du premier exercice est de pouvoir dessiner un flocon de neige sans se répéter, grâce aux fonctions.
</p>

<p>
Voici ce qu'on veut obtenir :
</p>

<figure id="org0a4967e">
<img src="./img/snow_flake.png" alt="snow flake" align="center" class="img" width="233px" height="210px" display="block">

</figure>

<p>
Ce dessin est très facile à réaliser si on le décompose correctement avec des fonctions. En effet, le flocon est composé de :
</p>
<ul class="org-ul">
<li>6 fois la même branche :</li>
</ul>

<figure id="org0a5d603">
<img src="./img/branch.png" alt="snow flake branch" align="center" class="img" width="118px" height="213px" display="block">

</figure>

<ul class="org-ul">
<li>Une branche est elle-même composée d'une ligne + une forme en V le tout répété 4 fois:</li>
</ul>

<figure id="org428bc41">
<img src="./img/fd_v.png" alt="snow flake fd + v" align="center" class="img" width="75px" height="116px" display="block">

</figure>

<ul class="org-ul">
<li>Et enfin, la forme en V en elle-même est une suite de plusieurs déplacements.</li>
</ul>

<figure id="orgd59446e">
<img src="./img/v.png" alt="snow flake v" align="center" class="img" width="174px" height="169px" display="block">

</figure>

<p>
Ces 3 étapes de décomposition vont correspondent en fait aux 3 fonctions dont nous avons besoin pour créer ce flocon de neige sans se répéter et en quelques lignes seulement.
</p>

<p>
Dans un programme nommé <code>flocon.py</code> :
</p>
<ul class="org-ul">
<li>Configure correctement une tortue pour qu'elle dessine en blanc sur fond "turquoise" et avec une épaisseur de trait de 6.</li>
<li>Crée une fonction <code>forme_v()</code> qui contient les étapes pour faire le V :
<ul class="org-ul">
<li>Tourner à droite de 25&deg;</li>
<li>Avancer de 50 pixels</li>
<li>Reculer de 50 pixels</li>
<li>Tourner à gauche de 50&deg;</li>
<li>Avancer de 50 pixels</li>
<li>Reculer de 50 pixels</li>
<li>Tourner à droite de 25&deg;</li>
</ul></li>
<li>Crée une fonction <code>branche()</code> qui contient les étapes pour faire une branche :
<ul class="org-ul">
<li>Répéter 4 fois :
<ul class="org-ul">
<li>Avancer de 30 pixels</li>
<li>Dessiner un V</li>
</ul></li>
<li>Reculer de 120 pixels</li>
</ul></li>
<li>Crée une fonction <code>flocon()</code> qui contient les étapes pour dessiner un flocon :
<ul class="org-ul">
<li>Répéter 6 fois :
<ul class="org-ul">
<li>Dessiner une branche</li>
<li>Tourner à droite de 60&deg;</li>
</ul></li>
</ul></li>
<li>Enfin, appelle la fonction <code>flocon()</code> et observe le flocon se dessiner !</li>
</ul>
</div>
</div>
</div>
</div>


<div id="outline-container-chapitre8" class="outline-2">
<h2 id="chapitre8">Chapitre 8 : Mise en pratique 2</h2>
<div class="outline-text-2" id="text-chapitre8">
<p>
Attention ! Pour chaque exercice, il faudra bien faire la différence entre le code <b>à l'intérieur des fonctions</b> et le code qui <b>utilise les fonctions</b>.
</p>

<p>
Nous utiliserons le fichier <code>mes_fonctions</code> précédemment et nous y ajouterons de nouvelles fonctions.
</p>
</div>

<div id="outline-container-chapitre8_niv1" class="outline-3">
<h3 id="chapitre8_niv1">Niveau 1</h3>
<div class="outline-text-3" id="text-chapitre8_niv1">
</div>
<div id="outline-container-orgf328859" class="outline-4">
<h4 id="orgf328859">Division euclidienne</h4>
<div class="outline-text-4" id="text-orgf328859">
<p>
Dans le fichier <code>mes_fonctions.py</code> :
</p>
<ul class="org-ul">
<li>Crée une nouvelle fonction <code>div_euclidienne(a,b)</code> qui <b>retourne un tuple</b> contenant le <b>quotient</b> et le <b>reste</b> de la division euclidienne de <code>a</code> par <code>b</code> sous la forme <code>(quotient, reste)</code>.</li>
</ul>
<p>
Dans un programme nommé <code>manips_nombres.py</code> :
</p>
<ul class="org-ul">
<li>importe ton module <code>mes_fonctions</code></li>
<li><b>Utilise</b> la fonction <code>div_euclidienne()</code> dans un programme qui demande à l'utilisateur deux nombres entiers et affiche le calcul effectué ainsi que le quotient et le reste de la division euclidienne de ces nombres.</li>
</ul>
</div>
</div>

<div id="outline-container-org5abe9cf" class="outline-4">
<h4 id="org5abe9cf">Pair ou impair</h4>
<div class="outline-text-4" id="text-org5abe9cf">
<p>
Dans le fichier <code>mes_fonctions.py</code> :
</p>
<ul class="org-ul">
<li>Crée une nouvelle fonction <code>is_pair(nb)</code> qui <b>retourne <code>True</code> si <code>nb</code> est pair et <code>False</code> sinon</b>.</li>
</ul>
<p>
Dans le programme <code>manips_nombres.py</code>:
</p>
<ul class="org-ul">
<li><b>Utilise cette fonction</b> après avoir demandé un nombre entier à l'utilisateur et affiche un texte indiquant si le nombre est pair ou impair.</li>
</ul>
</div>
</div>

<div id="outline-container-org3ec55d2" class="outline-4">
<h4 id="org3ec55d2">Diviseurs</h4>
<div class="outline-text-4" id="text-org3ec55d2">
<p>
Dans le fichier <code>mes_fonctions.py</code> :
</p>
<ul class="org-ul">
<li>Crée une fonction <code>diviseurs(nb)</code> qui <b>retourne la liste</b> de tous les diviseurs du nombre <code>nb</code>.</li>
</ul>
<p>
Dans le programme <code>manips_nombres.py</code> :
</p>
<ul class="org-ul">
<li><b>Utilise cette fonction</b> après avoir demandé un nombre entier à l'utiliateur et affiche tous les diviseurs de ce nombre, séparés par des virgules et sans crochets.</li>
</ul>
</div>
</div>

<div id="outline-container-orgcc92235" class="outline-4">
<h4 id="orgcc92235">Nombres premiers</h4>
<div class="outline-text-4" id="text-orgcc92235">
<p>
Dans le fichier <code>mes_fonctions.py</code> :
</p>
<ul class="org-ul">
<li>Crée une fonction <code>is_premier(nb)</code> qui <b>retourne <code>True</code> si <code>nb</code> est un nombre premier et <code>False</code> sinon</b>.</li>
<li>Crée une fonction <code>nb_premiers(n)</code> qui <b>retourne une liste</b> contenant les <code>n</code> premiers nombres premiers.</li>
</ul>
<p>
Dans le programme <code>manips_nombres.py</code> :
</p>
<ul class="org-ul">
<li><b>Utilise ces fonctions</b> après avoir demandé à l'utilisateur le nombre (entier) de nombres premiers à afficher puis affiche-les ; <b>un par ligne</b>.</li>
</ul>

<p>
Pour la suite, tu es libre d'ajouter et d'utiliser les fonctions que tu veux à ton module <code>mes_fonctions</code> pour ne plus avoir besoin de réécrire à chaque fois les fonctions que tu réutilises.
</p>
</div>
</div>

<div id="outline-container-org6992817" class="outline-4">
<h4 id="org6992817">Cercle</h4>
<div class="outline-text-4" id="text-org6992817">
<p>
Dans un programme nommé <code>super_cercle.py</code> :
</p>
<ul class="org-ul">
<li>Crée une fonction <code>surface_cercle(rayon)</code> qui <b>retourne un float</b> correspondant à la surface d'un cercle de rayon <code>rayon</code>.</li>
<li>Crée une fonction <code>perimetre_cercle(rayon)</code> qui <b>retourne un float</b> correspondant au périmètre d'un cercle de rayon <code>rayon</code>.</li>
<li>Crée une fonction <code>creer_cercle(rayon)</code> qui <b>dessine avec Turtle</b> un cercle de rayon <code>rayon</code>.</li>
<li><b>Utilise toutes ces fonctions</b> dans un programme qui demande le rayon à l'utiliateur et affiche la surface, le périmètre et le dessin du cercle.</li>
</ul>
</div>
</div>

<div id="outline-container-org50a0ec5" class="outline-4">
<h4 id="org50a0ec5">Lettres</h4>
<div class="outline-text-4" id="text-org50a0ec5">
<p>
Dans un programme nommé <code>lettres.py</code> :
</p>
<ul class="org-ul">
<li>Crée une fonction <code>afficher_lettres(chaine)</code> <b>qui permet d'afficher</b> chaque lettre d'une chaîne de caractères ; une par ligne.</li>
<li><b>Utilise cette fonction</b> dans un programme qui demande à l'utilisateur un mot ou une phrase et qui affiche ensuite dans l'ordre chaque lettre une à une.</li>
</ul>
<p>
Exemple d'affichage pour <code>chaine = "python"</code> :
</p>
<pre class="example" id="orgdeefbf3">
p
y
t
h
o
n
</pre>
</div>
</div>
</div>

<div id="outline-container-chapitre8_niv2" class="outline-3">
<h3 id="chapitre8_niv2">Niveau 2</h3>
<div class="outline-text-3" id="text-chapitre8_niv2">
</div>
<div id="outline-container-org9de79f0" class="outline-4">
<h4 id="org9de79f0">Occurrences de lettres</h4>
<div class="outline-text-4" id="text-org9de79f0">
<p>
Dans un programme nommé <code>occurrences.py</code> :
</p>
<ul class="org-ul">
<li>Crée une fonction <code>occurrences(chaine)</code> qui <b>renvoie un dictionnaire</b> contenant comme clefs chaque lettre présente dans la chaîne de caractères <code>chaine</code> et comme valeurs le nombre de fois où elle apparaît dans la chaîne.</li>
<li><b>Utilise cette fonction</b> dans un programme qui demande à l'utilisateur un mot ou une phrase et qui affiche chaque lettre et le nombre de fois où elle apparaît.</li>
</ul>
<p>
Exemple d'affichage pour <code>chaine = "Bonjour"</code> :
</p>
<pre class="example" id="orgecb2724">
Le caractère " B " apparaît 1 fois.
Le caractère " o " apparaît 2 fois.
Le caractère " n " apparaît 1 fois.
Le caractère " j " apparaît 1 fois.
Le caractère " u " apparaît 1 fois.
Le caractère " r " apparaît 1 fois.
</pre>
</div>
</div>

<div id="outline-container-org6b4acec" class="outline-4">
<h4 id="org6b4acec">Mot inverse</h4>
<div class="outline-text-4" id="text-org6b4acec">
<p>
Dans un programme nommé <code>mot_inverse.py</code> :
</p>
<ul class="org-ul">
<li>Crée une fonction <code>mot_inverse(mot)</code> qui <b>retourne une chaîne</b> correspondant à l'inverse du mot <code>mot</code>. <b>Attention, le mot original ne doit pas être modifié !</b></li>
<li><b>Utilise cette fonction</b> dans un programme qui :
<ul class="org-ul">
<li>Demande un mot à l'utilisateur.</li>
<li>Affiche le mot original et son inverse.</li>
</ul></li>
</ul>
<p>
Exemple pour le mot "python" :
</p>
<pre class="example" id="org519aa67">
mot original : python
inverse : nohtyp
</pre>
</div>
</div>
<div id="outline-container-orgb2ff4a8" class="outline-4">
<h4 id="orgb2ff4a8">Palindrome</h4>
<div class="outline-text-4" id="text-orgb2ff4a8">
<p>
Un palindrome est un mot dont l'ordre des lettres reste le même qu'on le lise de gauche à droite ou de droite à gauche.
</p>

<p>
Dans un programme nommé <code>palindrome.py</code> :
</p>
<ul class="org-ul">
<li>Crée une fonction <code>est_palindrome(mot)</code> qui <b>retourne <code>True</code> si le mot <code>mot</code> est un palindrome et <code>False</code> sinon</b>.</li>
<li><b>Utilise cette fonction</b> dans un programme qui :
<ul class="org-ul">
<li>Demande un mot à l'utilisateur.</li>
<li>Affiche un texte indiquant si le mot est un palindrome ou non.</li>
</ul></li>
</ul>
</div>
</div>
</div>

<div id="outline-container-chapitre8_niv3" class="outline-3">
<h3 id="chapitre8_niv3">Niveau 3</h3>
<div class="outline-text-3" id="text-chapitre8_niv3">
</div>
<div id="outline-container-org4fe4b84" class="outline-4">
<h4 id="org4fe4b84">Rendu de monnaie</h4>
<div class="outline-text-4" id="text-org4fe4b84">
<p>
Nous voulons créer un programme qui permet de calculer un rendu de monnaie et de dire de quels billets et pièces nous avons besoin pour former la somme à rendre. Par exemple, si la somme à payer est de 18.57€ et qu'un client donne 100€, le programme doit pouvoir :
</p>
<ol class="org-ol">
<li>Calculer qu'il faut rendre 81.43€</li>
<li>Afficher les billets et les pièces à utiliser pour cela. Exemple :</li>
</ol>
<pre class="example" id="orge9e953c">
Prix à payer : 18.57€
Rendu : 81.43€
Décomposition :
50€ : 1
20€ : 1
10€ : 1
1€ : 1
0.20€ : 2
0.02€ : 1
0.01€ : 1
</pre>
<p>
Nous considérerons les sommes suivantes pour décomposer les sommes : 500€, 100€, 50€, 20€, 10€, 5€, 2€, 1€, 0.50€, 0.20€, 0.10€, 0.05€, 0.02€, 0.01€. L'algorithme devra bien entendu utiliser le moins de pièces et billets possibles.
</p>

<p>
Dans un programme nommé <code>rendu_monnaie.py</code> :
</p>
<ul class="org-ul">
<li>Crée une fonction <code>rendu_monnaie(prix, somme_payee)</code> qui <b>retourne la somme à rendre</b>.</li>
<li>Crée une fonction <code>decomposer_somme(somme)</code> qui <b>retourne l'ensemble des billets et pièces à utiliser et leur nombre</b> nécessaires pour décomposer la somme d'argent <code>somme</code>. Tu peux par exemple retourner cette information sous forme de dictionnaire.</li>
<li><b>Utilise ces fonctions</b> dans un programme qui :
<ul class="org-ul">
<li>Demande à l'utilisateur un prix (float)</li>
<li>Demande à l'utilisateur la somme qu'il donne (float)</li>
<li>Affiche la somme à rendre ainsi que les billets et pièces à utiliser.</li>
</ul></li>
</ul>
</div>
</div>
</div>
</div>
<div id="outline-container-pendu" class="outline-2">
<h2 id="pendu">Le pendu</h2>
<div class="outline-text-2" id="text-pendu">
<p>
Dans ce chapitre, nous allons commencer puis améliorer un jeu de pendu. Tu es libre d'organiser ton code comme tu le souhaites tant qu'il respecte des règles de base :
</p>
<ul class="org-ul">
<li>Le nom des fonctions doit être explicite</li>
<li>1 fonction = 1 action</li>
<li>Une fonction ne doit pas faire plus de 20 lignes</li>
<li>Le nom des variables doit être explicite</li>
</ul>

<p>
Bien-sûr, ton code doit contenir uniquement des fonctions, qui peuvent faire appel à d'autres fonctions. Le seul code qui sera en dehors d'une fonction est celui qui appelle la boucle de jeu (qui est une fonction).
</p>
</div>

<div id="outline-container-org17ca831" class="outline-3">
<h3 id="org17ca831">Fonctionnement du programme</h3>
<div class="outline-text-3" id="text-org17ca831">
<p>
Le programme devra :
</p>
<ul class="org-ul">
<li>Demander un mot à l'utilisateur (ce sera le mot à trouver) et l'enregistrer.</li>
<li>Limiter le nombre d'erreurs (lettres non contenues dans le mot) à un nombre inférieur à 10 (5 par exemple).</li>
<li>Tant qu'il reste des essais :
<ul class="org-ul">
<li>Afficher le mot avec les lettres trouvées et des _ à la place des lettres manquantes.</li>
<li>Afficher toutes les lettres essayées jusqu'à présent.</li>
<li>Demander une lettre à l'utilisateur.</li>
<li>Indiquer si la lettre est contenue dans le mot.</li>
<li>Si le mot est complètement trouvé, affichage de la fin de partie.</li>
</ul></li>
<li>Si le nombre d'essais tombe à 0 et que le mot n'a pas été trouvé, affichage de la fin de partie avec le mot qu'il fallait trouver.</li>
</ul>

<p>
L'affichage peut être le même dans le cas d'une victoire ou d'une défaite mais il faudra quand même indiquer si le joueur a gagné ou perdu.
</p>

<p>
Pour t'aider, voici un exemple des fonctions que tu peux créer et utiliser :
</p>
<ul class="org-ul">
<li><code>afficher_mot(mot, lettres_trouvees)</code> : Affiche le mot avec uniquement les lettres trouvées et des _ à la place des lettres à trouver.</li>
<li><code>demander_mot()</code> : Demande un mot à l'utilisateur et le retourne (<code>return</code>)</li>
<li><code>afficher_statut(mot, lettres_trouvees, nb_essais)</code> : Affiche le statut complet de la partie, c'est-à-dire :
<ul class="org-ul">
<li>le mot avec les lettres trouvées jusqu'à présent</li>
<li>toutes les lettres essayées</li>
<li>les essais restants</li>
</ul></li>
<li><code>mot_trouve(mot, lettres_trouvees)</code> : Renvoie <code>False</code> s'il reste encore des lettres à trouver dans <code>mot</code> et <code>True</code> si toutes les lettres ont été trouvées.</li>
<li><code>jeu()</code> : la boucle de jeu.</li>
</ul>
</div>
</div>
</div>

<div id="outline-container-l-systemes" class="outline-2">
<h2 id="l-systemes">L-systèmes</h2>
<div class="outline-text-2" id="text-l-systemes">

<figure id="orgc503874">
<img src="./img/fractal_weeds.jpg" alt="fractal_weeds.jpg">

</figure>

<p>
Les L-systèmes, inventés en 1968 par le biologiste hongrois Aristid Lindenmayer, sont des procédés permettant de modéliser des processus de développement et de prolifération de plantes ou bactéries.
</p>

<p>
Pour concevoir un L-système, il faut définir un ensemble de symboles et de règles qui vont permettre de modéliser un certain processus de croissance grâce à un système de réécriture.
</p>
</div>

<div id="outline-container-l-systemes-algue" class="outline-3">
<h3 id="l-systemes-algue">L'algue de Lindenmayer</h3>
<div class="outline-text-3" id="text-l-systemes-algue">
<p>
Nous allons étudier dans un premier temps un L-système très simple : "l'algue de Lindenmayer". Ce L-système se définit de la manière suivante :
</p>
<ul class="org-ul">
<li>Alphabet : {A,B}</li>
<li>Axiome de départ : A</li>
<li>Règles :
<ul class="org-ul">
<li>A &rarr; AB</li>
<li>B &rarr; A</li>
</ul></li>
</ul>

<p>
Les trois points ci-dessus nous permettent de construire de manière récurrente les différentes <b>générations</b> de l'algue de Lindenmayer.
</p>

<p>
Explications :
</p>

<ul class="org-ul">
<li>L'alphabet : Il définit l'ensemble des caractères qui le L-système pourra utiliser.</li>
<li>L'axiome de départ : Il précise la <b>génération</b> 0. Dans ce cas, la génération 0 est seulement constituée d'une lettre A.</li>
<li>Les règles : Elles permettent de construire la génération n+1 en remplaçant (réécrivant) les A et les B de la génération n par, respectivement, des AB et des A.</li>
</ul>

<p>
Voici les 4 première générations de l'algue de Lindenmayer :
</p>
<pre class="example" id="orga65218b">
Génération 0 : A
Génération 1 : AB
Génération 2 : AB A
Génération 3 : AB A AB
</pre>

<p>
<b>Maintenant, essaye d'écrire ce que donnent les générations 4, 5 et 6.</b>
</p>

<p>
Pour chaque génération d'un L-système, on obtient une chaine de caractères que l'on appelle <b>mot</b>. Lorsque l'alphabet du L-Système s'y prête, ce <b>mot</b> peut être interprété comme des <b>"consignes d'affichage"</b>.
</p>
</div>
</div>

<div id="outline-container-l-systemes-koch" class="outline-3">
<h3 id="l-systemes-koch">La courbe de Koch</h3>
<div class="outline-text-3" id="text-l-systemes-koch">
<p>
Définissons maintenant un nouveau L-système : la <b>"courbe de Koch"</b>.
</p>

<ul class="org-ul">
<li>Alphabet : {F,+,-}</li>
<li>Axiome de départ : F</li>
<li>Règles :
<ul class="org-ul">
<li>F &rarr; F + F - F - F + F</li>
<li>+ &rarr; +</li>
<li>- &rarr; -</li>
</ul></li>
</ul>

<p>
<b>Construire les générations 0, 1 et 2 de la "courbe de Koch".</b>
</p>

<p>
Le choix de l'alphabet pour la courbe de Koch n'est pas anodin. Les trois symboles choisis peuvent être interprétés comme des instructions de construction pour une main tenant un crayon de la manière suivante (comme avec le module Turtle) :
</p>

<ul class="org-ul">
<li>F : avancer d'un pas (= forward).</li>
<li>+ : tourner à gauche de 90°.</li>
<li>- : tourner à droite de 90°.</li>
</ul>

<p>
<b>À partir de ces informations, dessine sur une feuille en t'aidant du quadrillage les générations 1 et 2 de la "courbe de Koch".</b>
</p>
</div>
</div>

<div id="outline-container-l-systemes-start-prog" class="outline-3">
<h3 id="l-systemes-start-prog">Début de la programmation d'un L-système</h3>
<div class="outline-text-3" id="text-l-systemes-start-prog">
<p>
Nous allons maintenant passer à la pratique.
</p>

<p>
Crée un programme nommé <code>l-systemes.py</code> dans lequel nous allons créer plusieurs fonctions.
</p>

<ol class="org-ol">
<li>Crée une fonction <code>generation(axiome, regles, n)</code> qui prend en paramètres :
<ul class="org-ul">
<li>L'axiome de départ sous forme de chaine de caractères.</li>
<li>l'ensemble des règles sous forme d'un dictionnaire <code>{caractère(s): remplacement}</code>.</li>
<li>la génération désirée (0, 1, 2&#x2026;).</li>
<li>La fonction doit renvoyer le <b>mot</b> final une fois que tous les remplacements ont été effectués.</li>
</ul></li>
<li>Crée une fonction <code>tracer(mot, angle, pas)</code> qui prend en paramètres :
<ul class="org-ul">
<li>Le mot à tracer.</li>
<li>L'angle des rotations droite et gauche.</li>
<li>Le pas (longueur) des segments (pour forward).</li>
<li>La fonction doit tracer à l'écran à l'aide du module <code>Turtle</code> le mot passé en paramètre.</li>
</ul></li>
</ol>

<p>
<b>Essaye de tracer les différentes générations de l'algue de Lendenmayer et de la courbe de Koch pour vérifier que tout fonctionne correctement.</b>
</p>
</div>
</div>

<div id="outline-container-l-systemes-cactus" class="outline-3">
<h3 id="l-systemes-cactus">Le cactus</h3>
<div class="outline-text-3" id="text-l-systemes-cactus">
<p>
Maintenant que nous avons commencé à créer les fonctions dont nous avons besoin pour obtenir le mot correspondant à une génération et tracer ce mot, nous allons introduire deux nouveaux symboles permettant de faire évoluer nos constructions de L-systèmes.
</p>

<p>
Définissons un nouveau L-Système : le "cactus" :
</p>
<ul class="org-ul">
<li>Alphabet : {F,+,-,[,]}</li>
<li>Axiome de départ : F</li>
<li>Règles :
<ul class="org-ul">
<li>F &rarr; FF[+F-F]FF[-F+F]FF</li>
<li>+ &rarr; +</li>
<li>- &rarr; -</li>
<li>[ &rarr; [</li>
<li>] &rarr; ]</li>
</ul></li>
</ul>

<p>
<b>Construire les générations 0, 1 et 2 du "cactus" (uniquement les mots obtenus).</b>
</p>

<p>
Pour tracer ce L-système, nouys allons interpréter le <b>mot</b> obtenu avec les conventions suivantes :
</p>
<ul class="org-ul">
<li>F : avancer d'un pas.</li>
<li>+ : tourner à gauche de 90°.</li>
<li>- : tourner à droite de 90°.</li>
<li>[ : mémoriser la position et l'orientation de la tortue.</li>
<li>] : revenir à la dernière position et à la dernière orientation de la tortue mémorisée.</li>
</ul>

<p>
<b>Tracer les générations 1 et 2 du cactus.</b>
</p>
</div>
</div>

<div id="outline-container-l-systemes-continue-prog" class="outline-3">
<h3 id="l-systemes-continue-prog">Suite de la programmation</h3>
<div class="outline-text-3" id="text-l-systemes-continue-prog">
<p>
Maintenant que nous avons ajouté deux symboles pour la représentations de nos L-systèmes, il va falloir les ajouter à notre fonction <code>tracer()</code>.
</p>

<ol class="org-ol">
<li>Ajoute la gestion du symbole <code>[</code> dans la fonction <code>tracer()</code>. Tu devras pour cela sauvegarder la position et l'orientation de la tortue. Tu peux les obtenir à l'aide des fonctions <code>t.pos()</code> et <code>t.heading()</code> de Turtle.</li>
<li>Ajoute ensuite la gestion du symbole <code>]</code> dans la fonction <code>tracer()</code>. Tu pourras utiliser les fonctions <code>t.setpos()</code> et <code>t.setheading()</code> de Turtle.
<ul class="org-ul">
<li><b>Tu devras utiliser le principe d'une pile pour sauvegarder les positions. La fonction <code>pop()</code> disponible pour les listes te sera très utile. Pour savoir ce qu'est une pile en programmation, google est ton ami !</b></li>
</ul></li>
<li>Enfin, nous allons ajouter deux paramètres à notre fonction : <code>position_initiale</code> et <code>orientation_initiale</code>. Notre fonction sera désormais protypée de la sorte : <code>tracer(mot, angle, pas, position_initiale, orienation_initiale)</code>.
<ul class="org-ul">
<li><code>position_initiale</code> est un tuple de la forme <code>(x,y)</code>. x est l'abscisse, y est l'ordonnée.</li>
<li><code>orientation_initiale</code> est un entier correspondant à l'orientation.</li>
</ul></li>
<li>Ajoute deux lignes de code au début de la fonction <code>tracer()</code> permettant de placer la tortue à la position donnée dans <code>position_initiale</code> et à l'orientation donnée dans <code>orientation_initiale</code>.</li>
</ol>

<p>
<b>Teste les nouvelles fonctionnalités en traçant quelques générations du cactus.</b>
</p>
</div>
</div>

<div id="outline-container-l-systemes-end" class="outline-3">
<h3 id="l-systemes-end">Nouveaux L-systèmes</h3>
<div class="outline-text-3" id="text-l-systemes-end">
<p>
Désormais, notre fonction pour tracer un L-système est complète. Nous allons donc pouvoir aborder de nouveaux L-systèmes plus intéressants et plus complexes.
</p>
</div>

<div id="outline-container-orgac7354b" class="outline-4">
<h4 id="orgac7354b">La brindille</h4>
<div class="outline-text-4" id="text-orgac7354b">

<figure id="orgaab7aef">
<img src="./img/brindille.png" alt="brindille" align="center" class="img" width="166px" height="320px" display="block">

</figure>

<p>
Construire graphiquement (sur l'ordinateur, avec le programme python) la génération 4 de la "brindille", dont le L-système est défini de la manière suivante :
</p>
<ul class="org-ul">
<li>Alphabet : {F,+,-,[,]}</li>
<li>Axiome de départ : F</li>
<li>Règles :
<ul class="org-ul">
<li>F &rarr; F[-F]F[+F]F</li>
<li>+ &rarr; +</li>
<li>- &rarr; -</li>
<li>[ &rarr; [</li>
<li>] &rarr; ]</li>
</ul></li>
<li>angle = 25</li>
<li>pas = 7</li>
<li>position_initiale = (0, -250)</li>
<li>orientation_initiale = 90</li>
</ul>
</div>
</div>

<div id="outline-container-org43ed760" class="outline-4">
<h4 id="org43ed760">Le flocon de Von Koch</h4>
<div class="outline-text-4" id="text-org43ed760">

<figure id="org2b1e969">
<img src="./img/flocon_koch.png" alt="flocon de Von Koch" align="center" class="img" width="242px" height="277px" display="block">

</figure>

<p>
Construire graphiquement la génération 4 du "flocon de Von Koch", dont le L-système est défini de la manière suivante :
</p>
<ul class="org-ul">
<li>Alphabet : {F,+,-,[,]}</li>
<li>Axiome de départ : F++F++F++</li>
<li>Règles :
<ul class="org-ul">
<li>F &rarr; F-F++F-F</li>
<li>+ &rarr; +</li>
<li>- &rarr; -</li>
<li>[ &rarr; [</li>
<li>] &rarr; ]</li>
</ul></li>
<li>angle = 60</li>
<li>pas = 5</li>
<li>position_initiale = (-200, -150)</li>
<li>orientation_initiale = 0</li>
</ul>
</div>
</div>

<div id="outline-container-orgd05c6ce" class="outline-4">
<h4 id="orgd05c6ce">La broussaille</h4>
<div class="outline-text-4" id="text-orgd05c6ce">

<figure id="org6c94628">
<img src="./img/broussaille.png" alt="broussaille" align="center" class="img" width="242px" height="287px" display="block">

</figure>

<p>
Construire graphiquement la génération 4 de la "broussaille", dont le L-système est défini de la manière suivante :
</p>
<ul class="org-ul">
<li>Alphabet : {F,+,-,[,]}</li>
<li>Axiome de départ : F</li>
<li>Règles :
<ul class="org-ul">
<li>F &rarr; FF-[-F+F+F]+[+F-F-F]</li>
<li>+ &rarr; +</li>
<li>- &rarr; -</li>
<li>[ &rarr; [</li>
<li>] &rarr; ]</li>
</ul></li>
<li>angle = 25</li>
<li>pas = 10</li>
<li>position_initiale = (0, -250)</li>
<li>orientation_initiale = 90</li>
</ul>
</div>
</div>
</div>
</div>

<div id="outline-container-puissance4" class="outline-2">
<h2 id="puissance4">Puissance 4</h2>
<div class="outline-text-2" id="text-puissance4">

<figure id="orgef7929b">
<img src="./img/puissance4.jpg" alt="puissance4.jpg">

</figure>

<p>
Dans ce chapitre, tu vas mettre en applications tout ce que tu as appris dans les chapitres précédents. Pour cela, tu vas créer un projet de plus grande envergure que les exercices que tu as faits.
</p>

<p>
Dans cette section, nous allons créer un <b>Puissance 4</b>. Nous commencerons par le créer à partir des notions que nous avons vues, donc avec une interface en <b>ligne de commande</b>. Par la suite, quand nous étudierons comment créer des interfaces graphiques, nous pourrons revenir sur ce projet pour ajouter des visuels plus intéressants.
</p>

<p>
<b>Les consignes qui sont données dans ce chapitre sont là pour t'aider à réaliser le projet. Le but est que tu développes le Puissance 4 en t'aidant le moins possible des consignes : dans un projet comme celui-ci, il n'y a pas "une seule bonne réponse", chacun peut avoir des idées différentes pour développer et c'est le meilleur moyen de progresser. Si tu es en trop grande difficulté, les étapes décrites dans ce chapitre sont là pour t'aider.</b>
</p>

<p>
Si tu as des idées d'améliorations ou que tu veux faire quelque chose différemment, tu es libre de les réaliser, c'est ton projet ! Néanmoins, le professeur vérifiera que ton travail est correct et correspond aux bonnes pratiques de Python que nous avons étudiées.
</p>
</div>

<div id="outline-container-puissance4_règles" class="outline-3">
<h3 id="puissance4_règles">Règles du Puissance 4</h3>
<div class="outline-text-3" id="text-puissance4_règles">
<p>
Le but du jeu est d'aligner une suite de 4 pions de même couleur sur une grille comptant <b>6 rangées</b> et <b>7 colonnes</b>. Chaque joueur dispose de 21 pions d'une couleur, en général jaune ou rouge. Tour à tour, les deux joueurs placent un pion dans la <b>colonne</b> de leur choix, le pion <b>coulisse alors jusqu'à la position la plus basse possible dans la dite colonne</b> à la suite de quoi c'est à l'adversaire de jouer. Le vainqueur est le joueur qui réalise le premier un <b>alignement (horizontal, vertical ou diagonal) consécutif d'au moins quatre pions de sa couleur.</b> Si, alors que toutes les cases de la grille de jeu sont remplies, aucun des deux joueurs n'a réalisé un tel alignement, la partie est déclarée nulle.
</p>
</div>
</div>

<div id="outline-container-puissance4_etape1" class="outline-3">
<h3 id="puissance4_etape1">Étape 1 : Définir la structure de notre programme</h3>
<div class="outline-text-3" id="text-puissance4_etape1">
<p>
Dans cette étape, tu ne vas pas encore coder. Nous allons d'abord réfléchir à la structure de notre programme et imaginer son fonctionnement général. Il faut que l'on définisse de quelles fonctions nous auront besoin pour faire fonctionner notre programme.
Parfois, il est utile d'utiliser du "pseudo code". Le pseudo code, c'est une façon d'écrire un algorithme de façon presque naturelle, sans langage de programmation. Par exemple, dans un pseudo code on peu écrire :
</p>
<pre class="example" id="org5ebe0d8">
si (utilisateur écrit "Bonjour") alors
    afficher "Bonjour"
sinon
    afficher "Au revoir"
</pre>
<p>
Le pseudo code aide à déterminer quelles actions notre programme devra effectuer.
</p>

<p>
Notre programme ne comportera que des fonctions. Chaque action devra être effectuée grâce à une fonction. C'est comme ça que l'on programme : ça permet de pouvoir s'y retrouver plus facilement dans le code et de pouvoir mieux repérer nos erreurs.
</p>

<p>
La seule instruction qui ne sera pas dans une fonction sera celle qui lance le jeu !
</p>
</div>

<div id="outline-container-org034f3f5" class="outline-4">
<h4 id="org034f3f5">Fonctionnement de la grille</h4>
<div class="outline-text-4" id="text-org034f3f5">
<p>
La "grille" du jeu sera représentée par une liste <b>à deux dimension</b>, c'est à dire une liste de plusieurs listes. Ce sera donc une liste contenant 6 listes qui contiendront chacune 7 chiffres. Chaque sous-liste de la grille représentera une ligne de la grille. Comme le Puissance 4 contient 7 colonnes, chaque ligne aura donc 7 chiffres. La valeur d'une case de la grille a 3 possibilités :
</p>
<ul class="org-ul">
<li><b>0</b> : la case est libre.</li>
<li><b>1</b> : un jeton du joueur 1 est placé ici.</li>
<li><b>2</b> : un jeton du joueur 2 est placé ici.</li>
</ul>

<p>
Au début, la grille sera remplie de <b>0</b> :
</p>
<div class="org-src-container">
<pre class="src src-python">[[0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0]]
</pre>
</div>

<p>
Lorsqu'un joueur placera un pion, il devra choisir seulement la colonne. À nous de "simuler" le fait que le pion tombe jusqu'à la première ligne disponible. Nous aurons une fonction pour cela. Par exemple, si le joueur 1 décide de placer son pion dans la colonne 3 (en partant de 0), la grille contiendra :
</p>
<div class="org-src-container">
<pre class="src src-python">[[0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0],
 [0,0,0,1,0,0,0]]
</pre>
</div>
<p>
Si le joueur 2 décide de placer son pion dans la même colonne que le joueur 1, la grille deviendra :
</p>
<div class="org-src-container">
<pre class="src src-python">[[0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0],
 [0,0,0,0,0,0,0],
 [0,0,0,2,0,0,0],
 [0,0,0,1,0,0,0]]
</pre>
</div>

<p>
Et ainsi de suite.
</p>

<p>
Par exemple, si les jetons jaunes sont ceux du joueur 1 et les jetons rouges ceux du joueur 2, nous pouvons représenter la grille comme cela :
</p>


<figure id="org8e6657e">
<img src="./img/schema_liste.png" alt="schema_liste.png">

</figure>

<p>
Pour parcourir une liste à deux dimensions, c'est à dire effectuer un test ou une action sur chaque case de la liste, nous utilisons une double boucle. En effet, par exemple si l'on veut ajouter un pion du joueur 1 dans la 2<sup>ème</sup> colonne de la 3<sup>ème</sup> ligne, il faut écrire :
</p>
<div class="org-src-container">
<pre class="src src-python">grille[2][1] = 1
<span style="font-weight: bold; font-style: italic;"># </span><span style="font-weight: bold; font-style: italic;">grille[ligne][colonne]</span>
</pre>
</div>

<p>
Le premier indice correspond à la ligne et le second à la colonne. Alors pour parcourir et afficher toute la liste :
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="font-weight: bold;">for</span> ligne <span style="font-weight: bold;">in</span> <span style="font-weight: bold;">range</span>(<span style="font-weight: bold;">len</span>(grille)):
    <span style="font-weight: bold;">for</span> colonne <span style="font-weight: bold;">in</span> <span style="font-weight: bold;">range</span>(<span style="font-weight: bold;">len</span>(grille[ligne])):
        <span style="font-weight: bold;">print</span>(grille[ligne][colonne])
</pre>
</div>
</div>
</div>

<div id="outline-container-org5210f11" class="outline-4">
<h4 id="org5210f11">Liste des fonctions</h4>
<div class="outline-text-4" id="text-org5210f11">
<p>
Maintenant que nous avons une idée générale du fonctionnement de la <b>grille de jeu</b>, voici une liste exhaustive des fonctions dont nous aurons besoin. Tu n'as pas besoin de tout comprendre dès le début, cette section servira aussi plus tard pour t'y retrouver dans toutes les fonctions. Ne commences pas non plus à coder les fonctions ici car nous allons revenir en détail sur chacune d'elles dans les étapes suivantes.
</p>

<p>
L'important est de visualiser à peu près comment sera notre programme.
</p>

<ul class="org-ul">
<li><code>jeu()</code> : c'est la fonction qui lancera le jeu et le relancera une fois la partie terminée si le joueur en a envie.
<ul class="org-ul">
<li><code>initialiserGrille()</code> : cette fonction permettra d'initialiser (mettre à zéro) la grille du Puissance 4. C'est comme si elle enlevait les pions ! On utilisera cette fonction avant chaque début de partie, dans la fonction <code>jeu()</code>.</li>
<li><code>boucleDeJeu()</code> : c'est la fonction qui demandera aux joueurs de choisir où poser leurs jetons et les placera tant qu'aucun des deux joueurs n'aura gagné et que la grille n'est pas pleine. Quand le jeu est fini, elle retourne le numéro du joueur qui a gagné (ou <code>False</code> si c'est un match nul).
<ul class="org-ul">
<li><code>joueurGagne(joueur)</code> : cette fonction détermine si le <code>joueur</code> passé en argument a gagné la partie. Elle sera utilisée dans la fonction <code>boucleDejeu()</code>.
<ul class="org-ul">
<li><code>verifierHorizontalement(joueur)</code> : vérifie si le joueur passé en paramètre a aligné 4 pions horizontalement dans la grille. Elle sera utilisée dans la fonction <code>joueurGagne(joueur)</code>.</li>
<li><code>verifierVerticalement(joueur)</code> : vérifie si le joueur passé en paramètre a aligné 4 pions verticalement dans la grille. Elle sera utilisée dans la fonction <code>joueurGagne(joueur)</code>.</li>
<li><code>verifierDiagonale(joueur)</code> : vérifie si le joueur passé en paramètre a aligné 4 pions en diagonale dans la grille. Elle sera utilisée dans la fonction <code>joueurGagne(joueur)</code>.</li>
</ul></li>
<li><code>verifierGrillePleine()</code> : cette fonction devra parcourir la grille pour vérifier s'il y a encore de la place pour poser des jetons.
Elle sera utilisée dans la fonction <code>boucleDeJeu()</code>.</li>
<li><code>afficherGrille()</code> : cette fonction affiche la grille actuelle. Nous formaterons la grille pour qu'elle apparaisse de manière compréhensible aux joueurs.
Elle sera utilisée dans la fonction <code>boucleDeJeu()</code></li>
<li><code>jouerLeTour(joueurActuel)</code> : cette fonction demandera à un joueur dans quelle colonne il veut placer son jeton. Elle placera ensuite le jeton au bon endroit, c'est-à-dire à la dernière ligne disponible de la colonne demandée.
Elle sera utilisée dans la fonction <code>boucleDeJeu()</code>
<ul class="org-ul">
<li><code>demanderColonne(joueur)</code> : cette fonction permet de demander au joueur dans quelle colonne il veut placer son pion. Elle renverra le numéro de la colonne demandée. Elle sera utilisée dans la fonction <code>remplirGrille(joueurActuel)</code>.</li>
<li><code>ligneLibreDeLaColonne(colonne)</code> : cette fonction renverra le numéro de la ligne libre de la colonne choisie par le joueur. Elle sera utilisée dans la fonction <code>remplirGrille(joueurActuel)</code>.</li>
<li><code>placerJeton(joueur, coordonnees)</code> : cette fonction permet de placer le jeton du <code>joueur</code> passé en paramètre à l'endroit de la grille indiqué par <code>coordonnees</code>. <code>coordonnees</code> sera un tuple qui aura cette forme : <code>(ligne, colonne)</code>. Elle sera utilisée dans la fonction <code>remplirGrille(joueurActuel)</code>.</li>
</ul></li>
<li><code>recupererSymbole(numeroJoueur)</code> : cette fonction retourne simplement le symbole correspondant au numéro du joueur passé en paramètre. Si le numéro n'est ni 1 ni 2 alors la fonction renverra un espace <b>' '</b>. Par exemple, si nous utilisons 'X' pour le joueur 1 et 'O' pour le joueur 2, la fonction <code>recupererSymbole(1)</code> renverra <b>'X'</b>.</li>
</ul></li>
<li><code>afficherFinDePartie(gagnant)</code> : cette fonction fera l'affichage de la fin du jeu en félicitant le gagant s'il y en a un et en disant qu'il y a match nul sinon.</li>
<li><code>demanderRejouer()</code> : cette fonction demandera aux joueurs s'ils veulent rejouer et retourne True ou False en fonction de leur réponse.</li>
</ul></li>
</ul>
</div>
</div>
</div>

<div id="outline-container-puissance4_etape2" class="outline-3">
<h3 id="puissance4_etape2">Étape 2 : Définir les variables globales</h3>
<div class="outline-text-3" id="text-puissance4_etape2">
<p>
Une <b>variable globale</b> est une variable qui pourra être utilisée dans toutes les fontions d'un programme, sans avoir besoin de la passer en paramètre. Pour le Puissance 4, nous aurons besoin de 3 variables. Elles correspondront à <b>la grille de jeu</b>, au <b>symbole du joueur 1</b> et au <b>symbole du joueur 2</b> dans la grille.
</p>

<p>
Comme vu précédemment, <b>La grille</b> sera une liste de 6 listes qui contiendront chacune 7 chiffres. Chaque sous-liste de la grille représentera une ligne de la grille.
</p>

<p>
Pour les symboles, je te conseille d'utiliser les caractères <b>'X'</b> et <b>'O'</b> pour bien différencier les joueurs.
</p>

<p>
Pour créer des variables globales, c'est très simple : c'est comme des variables normales, sauf qu'elles ne sont pas dans une fonction. Pour notre cas, nous appelerons nos variables <code>grille</code>, <code>symboleJoueur1</code> et <code>symboleJoueur2</code> :
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="font-weight: bold; font-style: italic;">grille</span> = [[0,0,0,0,0,0,0],
          [0,0,0,0,0,0,0],
          [0,0,0,0,0,0,0],
          [0,0,0,0,0,0,0],
          [0,0,0,0,0,0,0],
          [0,0,0,0,0,0,0]]
<span style="font-weight: bold; font-style: italic;">symboleJoueur1</span> = <span style="font-style: italic;">'X'</span>
<span style="font-weight: bold; font-style: italic;">symboleJoueur2</span> = <span style="font-style: italic;">'O'</span>
</pre>
</div>

<p>
Nous n'aurons pas besoin d'autres variables globales pour le moment.
</p>
</div>
</div>

<div id="outline-container-puissance4_etape3" class="outline-3">
<h3 id="puissance4_etape3">Étape 3 : Définir les fonctions d'affichage</h3>
<div class="outline-text-3" id="text-puissance4_etape3">
</div>
<div id="outline-container-org6b4972c" class="outline-4">
<h4 id="org6b4972c">Affichage des symboles des joueurs</h4>
<div class="outline-text-4" id="text-org6b4972c">
<ul class="org-ul">
<li><p>
Crée une fonction <code>recupererSymbole(numeroJoueur)</code>. La logique de cette fonction sera :
</p>
<pre class="example" id="org6f40d20">
si numeroJoueur est égal à 1:
    renvoyer symboleJoueur1
sinon si numeroJoueur est égal à 2:
    renvoyer symboleJoueur2
sinon
    renvoyer le caractère 'espace'
</pre></li>
</ul>
</div>
</div>

<div id="outline-container-orgf0115fd" class="outline-4">
<h4 id="orgf0115fd">Affichage de la grille</h4>
<div class="outline-text-4" id="text-orgf0115fd">
<ul class="org-ul">
<li><p>
Crée une fonction <code>initialiserGrille()</code> qui utilisera la variable globale <code>grille</code> pour lui redonner sa valeur par défaut :
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="font-weight: bold;">global</span> grille
<span style="font-weight: bold; font-style: italic;">grille</span> = [[0,0,0,0,0,0,0],
          [0,0,0,0,0,0,0],
          [0,0,0,0,0,0,0],
          [0,0,0,0,0,0,0],
          [0,0,0,0,0,0,0],
          [0,0,0,0,0,0,0]]
</pre>
</div></li>

<li>Crée une fonction <code>afficherGrille()</code>. Cette fonction doit simplement afficher toutes les cases de la grille <code>grille</code> (variable globale) pour que ce soit compréhensible pour les joueurs. Il faudra pour cela utiliser une double boucle pour parcourir chaque "case" de la liste. Pour chaque case, on doit afficher le symbole correspondant au pion du joueur placé. Dans notre cas, si c'est 1 il faudra afficher 'X'.
Ensuite on peut ajouter des caractères pour bien séparer chaque case. <b>Voici un exemple d'affichage</b> :</li>
</ul>

<p>
Début de partie :
</p>


<figure id="org7861cf5">
<img src="./img/exemple_vide.png" alt="exemple_vide.png">

</figure>

<p>
Après quelques tours :
</p>


<figure id="orge195e32">
<img src="./img/exemple_tours.png" alt="exemple_tours.png">

</figure>
</div>
</div>

<div id="outline-container-org1463624" class="outline-4">
<h4 id="org1463624">Affichage de fin de partie</h4>
<div class="outline-text-4" id="text-org1463624">
<ul class="org-ul">
<li>Crée une fonction <code>afficherFinDePartie</code> qui prend en paramètre une variable <code>gagnant</code>. Cette fonction doit :
<ul class="org-ul">
<li>Afficher la grille.</li>
<li>Afficher un texte qui dit quel joueur a gagné. Dans le cas où c'est un match nul, <code>gagnant</code> aura comme valeur <b>0</b>. Ne pas oublier ce cas-là !</li>
</ul></li>
</ul>

<p>
<b>Tu peux tester tes fonctions d'affichage en les appelant dans le programme, pour être sûr que ce qui est affiché correspond bien à ce que tu voulais.</b>
</p>
</div>
</div>
</div>

<div id="outline-container-puissance4_etape4" class="outline-3">
<h3 id="puissance4_etape4">Étape 4 : Définir les fonctions pour lancer le jeu</h3>
<div class="outline-text-3" id="text-puissance4_etape4">
<ul class="org-ul">
<li><p>
Crée une fonction <code>boucleDeJeu()</code> qui contiendra seulement le mot clef <code>pass</code>. Nous coderons cette fonction à l'étape suivante mais nous avons besoin de l'appeler dans la fonction de lancement du jeu.
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="font-weight: bold;">def</span> <span style="font-weight: bold;">boucleDeJeu</span>():
    <span style="font-weight: bold;">pass</span>
</pre>
</div></li>

<li>Crée une fonction <code>demanderRejouer()</code>. Elle devra :
<ul class="org-ul">
<li>Demander à l'utilisateur s'il veut rejouer tant que sa réponse n'est ni 'o' ni 'n'. Il devra taper 'o' s'il veut rejouer et 'n' s'il veut arrêter.</li>
<li>Retourner True si l'utilisateur veut rejouer et False sinon.</li>
</ul></li>

<li>Crée une fonction <code>jeu()</code> :
<ul class="org-ul">
<li>Tant que l'utilisateur veut rejouer, il faut :
<ul class="org-ul">
<li>Initialiser la grille en utilisant la fonction adéquate.</li>
<li>Appeler la fonction <code>boucleDeJeu()</code> et recuperer son resultat.</li>
<li>Afficher le message de fin de partie en utlisant la fonction adéquate.</li>
<li>Demander à l'utilisateur s'il veut rejouer en utilisant la fonction adéquate.</li>
</ul></li>
<li>Quand on sort de la boucle, cela veut dire que l'utilisateur ne veut plus jouer. Dans ce cas, il faudra juste afficher "Au revoir !".</li>
</ul></li>
</ul>
</div>
</div>

<div id="outline-container-puissance4_etape5" class="outline-3">
<h3 id="puissance4_etape5">Étape 5 : Déroulement d'une partie</h3>
<div class="outline-text-3" id="text-puissance4_etape5">
<p>
Dans cette étape nous allons commencer la fonction principale <code>boucleDeJeu()</code>. Nous allons préparer la logique et nous coderons les fonctions intérmédiaires au fur et à mesure des étapes suivantes.
</p>
</div>

<div id="outline-container-orgd428a36" class="outline-4">
<h4 id="orgd428a36">Fonctions intermédiaires</h4>
<div class="outline-text-4" id="text-orgd428a36">
<p>
Pour commencer, nous allons déclarer les fonctions utilisées dans <code>boucleDeJeu()</code> sans pour autant en écrire le code, avec le mot-clef <code>pass</code> :
</p>
<ul class="org-ul">
<li>Crée une fonction <code>joueurGagne()</code> qui prend en paramètre <code>joueur</code>.</li>
<li>Crée une fonction <code>verifierGrillePleine()</code>.</li>
<li>Crée une fonction <code>jouerLeTour()</code> qui prend en paramètre <code>joueur</code>.</li>
</ul>
</div>
</div>

<div id="outline-container-org55d42e7" class="outline-4">
<h4 id="org55d42e7">Boucle du jeu</h4>
<div class="outline-text-4" id="text-org55d42e7">
<p>
Définissons maintenant la logique de la boucle de jeu :
</p>
<ul class="org-ul">
<li>Modifie la fonction <code>boucleDeJeu()</code> en enlevant l'instruction <code>pass</code></li>
<li>Nous avons besoin d'une variable qui contiendra le numéro du joueur qui doit jouer. Cette variable sera toujours égale à 1 au début d'un partie (le joueur 1 commence).</li>
<li>Tant que la grille n'est pas pleine (<code>verifierGrillePleine()</code>), il faut :
<ul class="org-ul">
<li>Afficher la grille.</li>
<li>Jouer le tour du joueur actuel (sans oublier de préciser quel joueur).</li>
<li>Si le joueur actuel gagne (<code>joueurGagne(...)</code>), il faut renvoyer la valeur du joueur gagnant.</li>
<li>Sinon, inverser le numéro du joueur (la variable devient 2 si on fait jouer 1 et vice-versa).</li>
</ul></li>
<li>Quand c'est fini, cela signifie qu'il y a match nul. Dans ce cas, il faudra renvoyer <b>0</b>.</li>
</ul>
</div>
</div>
</div>

<div id="outline-container-puissance4_etape6" class="outline-3">
<h3 id="puissance4_etape6">Étape 6 : Déroulement d'un tour</h3>
<div class="outline-text-3" id="text-puissance4_etape6">
<p>
Nous allons maintenant coder le déroulement d'un tour. Voici ce qu'il se passe à chaque tour :
</p>
<ul class="org-ul">
<li>On demande à un joueur de choisir la colonne où placer son jeton. On lui redemande tant qu'il choisi une colonne inexistante (&lt;0 ou &gt;6).</li>
<li>On trouve quelle ligne est la première ligne libre (en partant du bas) de la colonne choisie.</li>
<li>On place le jeton du joueur dans la grille, aux coordonnées ainsi trouvées.</li>
</ul>
</div>

<div id="outline-container-org4f77a69" class="outline-4">
<h4 id="org4f77a69">Demander la colonne</h4>
<div class="outline-text-4" id="text-org4f77a69">
<p>
Commençons par la fonction qui demande la colonne au joueur :
</p>
<ul class="org-ul">
<li>Crée une fonction <code>demanderColonne()</code> qui prend en paramètre <code>joueur</code>. Cette fonction doit :
<ul class="org-ul">
<li>Afficher un message demandant au joueur de choisir sa colonne (préciser à quel joueur on demande pour que ce soit plus clair).</li>
<li>Récupérer son choix et le convertir en entier.</li>
<li>Recommencer tant que le choix de colonne est incorrect (afficher un message précisant pourquoi on redemande au joueur un numéro de colonne).</li>
<li>Retourner le choix de l'utilisateur.</li>
</ul></li>
</ul>
</div>
</div>

<div id="outline-container-orga2d6afe" class="outline-4">
<h4 id="orga2d6afe">Trouver la ligne où placer le jeton</h4>
<div class="outline-text-4" id="text-orga2d6afe">
<p>
Passons maintenant à la fonction qui trouve la ligne libre d'une colonne. Nous allons devoir coder une fonction qui parcourt chaque ligne de la grille pour vérifier si la colonne choisie est libre sur cette ligne. (Voir le fonctionnement de la grille à l'étape 1 pour savoir si une case est libre).
</p>

<p>
Il faudra garder la dernière ligne libre trouvée, car le parcours de la liste se fait de haut en bas et que nous devons placer les jetons le plus bas possible.
</p>
<ul class="org-ul">
<li>Crée une fonction <code>ligneLibreDeLaColonne()</code> qui prend en paramètre la <code>colonne</code>. Cette fonction doit parcourir toutes les lignes de la <code>colonne</code> afin de trouver la colonne libre la plus basse. Elle devra renvoyer le numéro de la ligne libre et -1 si aucune ligne n'est libre pour cette <code>colonne</code>.</li>
</ul>
</div>
</div>

<div id="outline-container-org70f07d8" class="outline-4">
<h4 id="org70f07d8">Placer le jeton</h4>
<div class="outline-text-4" id="text-org70f07d8">
<p>
La dernière fonction intermédiaire pour un tour sera la fonction <code>placerJeton(joueur, coordonnees)</code>. Cette fonction placera simplement le numéro du <code>joueur</code> à un l'endroit défini par le tuple <code>coordonnees</code>.
</p>
</div>
</div>

<div id="outline-container-org72df5f4" class="outline-4">
<h4 id="org72df5f4">Jouer le tour</h4>
<div class="outline-text-4" id="text-org72df5f4">
<p>
Enfin, nous allons pouvoir créer la fonction qui fait jouer le tour au joueur :
</p>
<ul class="org-ul">
<li>Modifie la fonction <code>jouerLeTour()</code> précédemment créée en supprimant le mot-clef <code>pass</code>. Voici la logique de la fonction :
<ul class="org-ul">
<li>Tant que la <code>ligne</code> vaut <b>-1</b> (c'est à dire est incorrecte) :
<ul class="org-ul">
<li>Demander la colonne au joueur (récupérer le résultat).</li>
<li>Trouver la ligne libre pour cette colonne (récupérer le résultat).</li>
<li>Si la ligne vaut encore <b>-1</b> dire au joueur que la colonne qu'il a choisie n'est plus libre.</li>
</ul></li>
<li>Quand on a trouvé la ligne correspondant à la colonne choisie, placer le jeton du joueur aux coordonnées trouvées.</li>
</ul></li>
</ul>

<p>
Nous avons fini de créer le déroulement d'un tour. Dans la prochaine étape, nous nous attaquerons à la fonction qui trouve le gagnant d'une partie.
</p>
</div>
</div>
</div>

<div id="outline-container-puissance4_etape7" class="outline-3">
<h3 id="puissance4_etape7">Étape 7 : Y a-t-il un vainqueur ?</h3>
<div class="outline-text-3" id="text-puissance4_etape7">
<p>
Désormais, on peut faire jouer un tour à un joueur. Il faut maintenant que l'on puisse déterminer à chaque fin de tour si le joueur qui vient de jouer a gagné ou s'il y a match nul.
</p>

<p>
Pour cela, nous utiliserons deux fonctions différentes : une première qui permet de vérifier si un joueur passé en paramètre a gagné et une seconde qui permet de vérifier si la grille est pleine.
</p>
</div>

<div id="outline-container-org8410f7e" class="outline-4">
<h4 id="org8410f7e">Trouver un alignement</h4>
<div class="outline-text-4" id="text-org8410f7e">
<p>
Nous allons commencer par déterminer si un joueur a gagné. Pour cela, nous devons créer 3 fonctions intermédiaires :
</p>
<ul class="org-ul">
<li><code>verifierHorizontalement(joueur)</code> : cette fonction vérifie si le joueur spécifié passé en paramètre a un <b>alignement horizontal</b> de 4 jetons. Pour cela, il faut parcourir toutes les lignes de la liste pour vérifier si le numéro du joueur apparaît 4 fois de suite dans la ligne.</li>
<li><code>verifierVerticalement(joueur)</code> : cette fonction vérifie si le joueur spécifié a un <b>alignement vertical</b> de 4 jetons. Il faudra parcourir chaque colonne de la liste pour vérifier si le numéro du joueur apparaît 4 fois de suite dans la colonne. <b>Conseil</b> : pas besoin de commencer la vérification au-delà de la 3<sup>ème</sup> ligne, car ce n'est plus possible d'aligner 4 pions sur 3 lignes !</li>
<li><code>verifierDiagonale(joueur)</code> : cette fonction vérifie si le joueur spécifié a un <b>aligement en diagonale</b> de 4 jetons. Il faudra parcourir toute la liste en cherchant si le numéro du joueur apparaît 4 fois de suite dans une diagonale <b>ou dans l'autre</b>. En effet, n'oublie pas les deux sens possibles d'une diagonale ! Cette fonction sera un peu plus difficile que les autres, je te conseille de commencer par essayer de parcourir les diagonales de la liste en faisant des tests d'affichage.</li>
</ul>
</div>
</div>

<div id="outline-container-orgbec9818" class="outline-4">
<h4 id="orgbec9818">Le joueur a-t-il a gagné ?</h4>
<div class="outline-text-4" id="text-orgbec9818">
<p>
Maintenant que nous avons codé nos 3 fonctions intermédiaires, nous pouvons modier la fonction <code>joueurGagne(joueur)</code>. La fonction doit maintenant renvoyer <code>True</code> si le <code>joueur</code> a un alignement horizontal, vertical ou en diagonale. Sinon, elle retourne <code>False</code>.
</p>
</div>
</div>

<div id="outline-container-org20d8647" class="outline-4">
<h4 id="org20d8647">Match nul ?</h4>
<div class="outline-text-4" id="text-org20d8647">
<p>
Enfin, il nous manque la fonction qui vérifie s'il y a <b>match nul</b>. Nous savons qu'il y a match nul si la grille est remplie et que personne n'a gagné. Alors, nous avons simplement besoin d'une fonction qui vérifie si la grille est pleine :
</p>
<ul class="org-ul">
<li>Modifie la fonction <code>verifierGrillePleine()</code>. Elle doit renvoyer <code>True</code> si la grille est pleine et <code>False</code> sinon.</li>
</ul>
</div>
</div>
</div>

<div id="outline-container-puissance4_etape8" class="outline-3">
<h3 id="puissance4_etape8">Étape 8 : Lancement du jeu !</h3>
<div class="outline-text-3" id="text-puissance4_etape8">
<p>
Désormais, il ne nous reste plus qu'à lancer le jeu : appelle simplement la fonction <code>jeu()</code> dans le programme !
</p>

<p>
Quand tu vas tester le jeu, il est très fort probable qu'il y ait des "bugs" et que certaines choses ne fonctionnent pas : c'est normal pour un gros programme. Ne t'inquiètes pas et n'hésite pas à faire plein de tests pour chaque fonction pour trouver d'où vient le problème.
</p>

<p>
:custom_id: ia_puissance4
</p>
</div>
</div>
<div id="outline-container-ia_puissance4_theorie" class="outline-3">
<h3 id="ia_puissance4_theorie">Théorie</h3>
<div class="outline-text-3" id="text-ia_puissance4_theorie">
</div>
<div id="outline-container-org4da0c31" class="outline-4">
<h4 id="org4da0c31">Ressources</h4>
<div class="outline-text-4" id="text-org4da0c31">
<p target="_blank">
<a href="https://www.youtube.com/watch?v=0lQxdR6IqCA&amp;t=103s" target="_blank">https://www.youtube.com/watch?v=0lQxdR6IqCA&amp;t=103s</a>
</p>

<p target="_blank">
Un cours de fac plutôt bien résumé : <a href="./manuel/Minmax.pdf" target="_blank">MinMax</a>
</p>
</div>
</div>
</div>

<div id="outline-container-ia_puissance4_code" class="outline-3">
<h3 id="ia_puissance4_code">Code</h3>
<div class="outline-text-3" id="text-ia_puissance4_code">
</div>
<div id="outline-container-orgb9ca4ee" class="outline-4">
<h4 id="orgb9ca4ee">Étape 1 : Tous les coups possibles</h4>
<div class="outline-text-4" id="text-orgb9ca4ee">
<p>
Crée une fonction qui doit retourner la liste de tous les coups possibles au prochain tour. Chaque élément de la liste sera un tuple correspondant à la ligne et la colonne où le jeton peut être placé : <b>(ligne, colonne)</b>.
</p>
</div>
</div>

<div id="outline-container-org74e46ba" class="outline-4">
<h4 id="org74e46ba">Étape 2 : Tous les alignements</h4>
<div class="outline-text-4" id="text-org74e46ba">
<p>
Crée une fonction qui retourne la liste de tous les alignements de 4 cases de la grille. La liste contiendra donc des listes de 4 éléments. Les alignements possibles sont :
</p>
<ul class="org-ul">
<li>En ligne</li>
<li>En colonne</li>
<li>En diagonale vers la droite</li>
<li>En diagonale vers la gauche</li>
</ul>
</div>
</div>

<div id="outline-container-org4b8f46a" class="outline-4">
<h4 id="org4b8f46a">Étape 3 : Fonction d'évaluation</h4>
<div class="outline-text-4" id="text-org4b8f46a">
<p>
Crée une fonction qui devra attribuer un "score" à une grille pour un joueur donné. Cette fonction permettra à l'IA de savoir quel coup lui rapporte le plus de points. Elle sera utilisée plus tard dans la fonction chargée d'anticiper quel coup amènera au meilleur résultat.
Voici quelques indications :
</p>

<p>
Le score varie en fonction des alignements de 4 encore possibles pour le joueur donné en paramètres. C'est ici que tu auras besoin de la fonction de l'étape 2. Sers-toi de la liste pour parcourir chaque alignement et vérifier si le joueur en paramètre peut encore aligner 4 pions dedans.
</p>

<p>
S'il peut, alors il faut compter combien de pions sont déjà présents dans l'alignement. Si c'est l'autre joueur qui peut, il faut aussi sauvegarder son score dans une autre variable. Attention, il ne faut pas ajouter 1,2 ou 3 au score car dans ce cas on ne peut pas savoir si 3 correspond à 3 pions alignés ou 3 pions dans 3 alignements différents. Pour contrer ce problème, voici la grille du score à ajouter en fonction du nombre de pions alignés :
</p>

<table>


<colgroup>
<col  class="org-right">

<col  class="org-right">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-right">Pions alignés</th>
<th scope="col" class="org-right">Score </th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-right">0</td>
<td class="org-right">+0</td>
</tr>

<tr>
<td class="org-right">1</td>
<td class="org-right">+1</td>
</tr>

<tr>
<td class="org-right">2</td>
<td class="org-right">+100</td>
</tr>

<tr>
<td class="org-right">3</td>
<td class="org-right">+10000</td>
</tr>

<tr>
<td class="org-right">4</td>
<td class="org-right">+1000000</td>
</tr>
</tbody>
</table>

<p>
Quand les scores des deux joueurs ont été calculés, la fonction devra renvoyer le score du joueur en paramètre moins le score de l'adversaire.
</p>
</div>
</div>
</div>

<div id="outline-container-org5481001" class="outline-3">
<h3 id="org5481001">Un peu de cours</h3>
<div class="outline-text-3" id="text-org5481001">
</div>
<div id="outline-container-orga0ae77c" class="outline-4">
<h4 id="orga0ae77c">Recherche</h4>
<div class="outline-text-4" id="text-orga0ae77c">
<p>
Le jeu du Puissance 4 est un jeu dit <b>déterministe</b> et <b>complètement observable</b>. Cela siginifie que l'agent sait dans quel état il est et dans quel état il sera (en fonction des actions qu'il fait). La solution de ce type de problème est une suite d'actions (par exemple "jouer dans la colonne n°3").
</p>

<p>
Pour trouver la meilleure solution possible dans un état donné, l'agent doit connaître toutes les possibilités de jeu et leurs conséquences. Nous utilisons pour imager cela un <b>arbre de recherche</b>. Cet arbre de recherche permet de parcourir toutes les possibilités de jeu.
</p>

<p>
Exemple de l'arbre de recherche du morpion (ou tic-tac-toe) :
</p>


<figure id="org56401df">
<img src="./img/arbre-recherche.png" alt="arbre-recherche.png">

</figure>

<p>
Pour pouvoir générer cet arbre de recherche pour notre IA, nous avons créé une fonction qui retourne tous les coups possibles, c'est-à-dire tous les ensembles <code>(ligne, colonne)</code> correspondants aux endroits où le prochain joueur peut placer son pion.
</p>
</div>
</div>

<div id="outline-container-org533fd39" class="outline-4">
<h4 id="org533fd39">Algorithme Min-Max</h4>
<div class="outline-text-4" id="text-org533fd39">
<p>
L'algorithme Min-Max est un algorithme utilisé uniquement pour la programmation d'intelligences artificielles de jeux. Le principe est le suivant:
</p>
<ul class="org-ul">
<li>Quand c'est au tour de l'agent de jouer (notre IA), il doit trouver la solution qui lui offrira le plus de chances de gagner. Pour ce faire, il va devoir <b>tester tous les coups</b> qu'il peut jouer dans l'<b>état actuel</b> de la grille.</li>
<li>Pour chaque coup possible, il vérifie le résultat (a-t-il gagné ?) et va tester <b>tous les coups que l'adversaire pourra jouer ensuite</b>.</li>
<li>L'agent continue de "simuler" la partie jusqu'à ce qu'il arrive dans un <b>état final</b>, c'est-à-dire un état où soit un des joueurs a gagné soit la grille est remplie.</li>
<li>L'agent doit recommencer cette simulation de partie pour tous les coups possibles à chaque fois.</li>
</ul>

<p>
C'est ici que nous aurons besoin d'utiliser la récursion : l'agent devra tester toutes les parties possibles pour déterminer quel coup amène la partie vers sa victoire. Chaque "étape" ou "étage" dans l'arbre de recherche correspond à ce que l'on appelle <b>la profondeur</b>. Plus l'agent va en profondeur, plus le temps de recherche sera long car à chaque prondeur, cela ajoute encore plus de solutions à vérifier.
</p>

<p>
<b>L'algorithme Min-Max est donc une manière de générer et explorer l'arbre de recherche associé à la partie de Puissance 4.</b>
</p>

<p>
Le fonctionnement de l'algorithme est le suivant :
</p>
<ul class="org-ul">
<li>Max et Min sont les deux joueurs.</li>
<li>Max joue en premier, Min en second.</li>
<li>Le joueur Max (qui correspond à l'agent) cherche à obtenir le score maximal avec son coup.</li>
<li>Le joueur Min (qui correspond au joueur humain) cherche à obtenir le score minimal avec son coup.</li>
</ul>

<p>
Le Puissance 4 est un <b>jeu à somme nulle</b>. Nous pouvons traduire cela par le fait que :
</p>
<ul class="org-ul">
<li>Quand le joueur 1 gagne, le joueur 2 a perdu.</li>
<li>Quand le joueur 2 gagne, le joueur 1 a perdu.</li>
<li>Quand il y a match nul, aucun des joueurs n'a gagné.</li>
</ul>
<p>
Nous avons déjà pu remarquer ça quand nous avons programmé les fonctions pour déterminer le vainqueur d'une partie : quand on trouve l'alignement d'un joueur, nous n'avons plus besoin de vérifier le reste de la grille.
</p>

<p>
<b>Pour l'algorithme Min-Max, nous aurons donc trois "scores" possibles pour une grille</b> :
</p>
<ul class="org-ul">
<li>1 si Max gagne.</li>
<li>-1 si Min gagne.</li>
<li>0 si aucun des deux ne gagne.</li>
</ul>

<p>
Le pseudo-code de l'algorithme Min-Max se trouve à la page 12 du cours dans la partie <b>Ressources</b>.
</p>
</div>
</div>
</div>

<div id="outline-container-org0a328fd" class="outline-3">
<h3 id="org0a328fd">Retour au code</h3>
<div class="outline-text-3" id="text-org0a328fd">
<p>
Pour notre jeu, nous utiliserons deux fonctions : <code>min_max(joueur_max, is_tour_max, profondeur)</code> et <code>trouver_meilleur_coup(joueur_max, profondeur)</code>.
</p>

<ul class="org-ul">
<li>La fonction <code>trouver_meilleur_coup(...)</code> doit :
<ul class="org-ul">
<li>Récupérer tous les coups possibles.</li>
<li>Initialiser <code>meilleur_score</code> à <code>-math.inf</code>.</li>
<li>Initialiser <code>meilleur_coup</code> à <code>None</code>.</li>
<li>Pour chaque coup possible :
<ul class="org-ul">
<li>Placer le jeton dans la grille aux coordonnées du coup.</li>
<li>Récupérer le score du coup grâce à <code>min_max</code>.</li>
<li>Effacer le coup dans la grille.</li>
<li>Garder en mémoire le meilleur score et le meilleur coup.</li>
</ul></li>
<li>Il faudra retourner à la fin les coordonnées du meilleur coup trouvé.</li>
</ul></li>

<li>Pour la fonction <code>min_max(...)</code>, nous pouvons utiliser le pseudo-code en page 12 du cours dans <b>Ressources</b>.</li>
</ul>
</div>
</div>
</div>
</div>
<div id="postamble" class="status">
<p class="author">Auteur: Bastien ZALUGAS</p>
</div>
</body>
</html>
